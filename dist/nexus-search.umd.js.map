{"version":3,"file":"nexus-search.umd.js","sources":["../src/storage/CacheManager.ts","../src/storage/IndexedDBService.ts","../src/utils/SearchUtils.ts","../src/utils/ValidationUtils.ts","../src/mappers/DataMapper.ts","../src/algorithms/trie/TrieNode.ts","../src/algorithms/trie/TrieSearch.ts","../src/mappers/IndexMapper.ts","../src/core/IndexManager.ts","../src/core/QueryProcessor.ts","../src/core/SearchEngine.ts","../src/types/errors.ts","../src/index.ts","../src/utils/PerformanceUtils.ts"],"sourcesContent":["import { SearchResult } from \"@/types\";\r\n\r\n\r\n\r\nexport class CacheManager {\r\n  private cache: Map<string, { data: SearchResult<any>[]; timestamp: number }>;\r\n  private readonly maxSize: number;\r\n  private readonly ttl: number; // Time to live in milliseconds\r\n\r\n  constructor(maxSize: number = 1000, ttlMinutes: number = 5) {\r\n    this.cache = new Map();\r\n    this.maxSize = maxSize;\r\n    this.ttl = ttlMinutes * 60 * 1000;\r\n  }\r\n\r\n  set(key: string, data: SearchResult<any>[]): void {\r\n    if (this.cache.size >= this.maxSize) {\r\n      this.evictOldest();\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n\r\n  get(key: string): SearchResult<any>[] | null {\r\n    const entry = this.cache.get(key);\r\n    \r\n    if (!entry) return null;\r\n    \r\n    if (this.isExpired(entry.timestamp)) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return entry.data;\r\n  }\r\n\r\n  private isExpired(timestamp: number): boolean {\r\n    return Date.now() - timestamp > this.ttl;\r\n  }\r\n\r\n  private evictOldest(): void {\r\n    let oldestKey: string | null = null;\r\n    let oldestTime = Infinity;\r\n\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (entry.timestamp < oldestTime) {\r\n        oldestTime = entry.timestamp;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    if (oldestKey) {\r\n      this.cache.delete(oldestKey);\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}","import { IndexOptions, SearchOptions, SearchDBSchema, IndexConfig, MetadataEntry } from \"@/types\";\r\nimport { IDBPDatabase, openDB } from \"idb\";\r\n\r\n\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n  caseSensitive: false,\r\n  stemming: true,\r\n  stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n  minWordLength: 2,\r\n  maxWordLength: 50,\r\n  fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n  fuzzy: false,\r\n  maxResults: 10,\r\n  threshold: 0.5,\r\n  fields: [],\r\n  sortBy: 'score',\r\n  sortOrder: 'desc',\r\n  page: 1,\r\n  pageSize: 10\r\n  \r\n};\r\n\r\nexport class IndexedDB {\r\n  private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n  private readonly DB_NAME = 'nexus_search_db';\r\n  private readonly DB_VERSION = 1;\r\n  private initPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    // Initialize immediately to catch early failures\r\n    this.initPromise = this.initialize();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.db) return;\r\n\r\n    try {\r\n      this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n        upgrade(db, oldVersion, newVersion, transaction) {\r\n          // Handle version upgrades\r\n          if (!db.objectStoreNames.contains('searchIndices')) {\r\n            const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n            indexStore.createIndex('timestamp', 'timestamp');\r\n          }\r\n\r\n          if (!db.objectStoreNames.contains('metadata')) {\r\n            const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n            metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n          }\r\n        },\r\n        blocked() {\r\n          console.warn('Database upgrade was blocked');\r\n        },\r\n        blocking() {\r\n          console.warn('Current database version is blocking a newer version');\r\n        },\r\n        terminated() {\r\n          console.error('Database connection was terminated');\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Storage initialization failed: ${message}`);\r\n    }\r\n  }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n\r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n\r\n      await this.db!.put('metadata', metadata); // No need to spread, directly use metadata\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async deleteIndex(key: string): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      await this.db!.delete('searchIndices', key);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to delete index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class SearchStorage {\r\n  private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n  private readonly DB_NAME = 'nexus_search_db';\r\n  private readonly DB_VERSION = 1;\r\n  private initPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    // Initialize immediately to catch early failures\r\n    this.initPromise = this.initialize();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.db) return;\r\n\r\n    try {\r\n      this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n        upgrade(db, oldVersion, newVersion, transaction) {\r\n          // Handle version upgrades\r\n          if (!db.objectStoreNames.contains('searchIndices')) {\r\n            const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n            indexStore.createIndex('timestamp', 'timestamp');\r\n          }\r\n\r\n          if (!db.objectStoreNames.contains('metadata')) {\r\n            const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n            metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n          }\r\n        },\r\n        blocked() {\r\n          console.warn('Database upgrade was blocked');\r\n        },\r\n        blocking() {\r\n          console.warn('Current database version is blocking a newer version');\r\n        },\r\n        terminated() {\r\n          console.error('Database connection was terminated');\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Storage initialization failed: ${message}`);\r\n    }\r\n  }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n    \r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n  \r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field directly\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n  \r\n      await this.db!.put('metadata', metadata); // Use metadata directly\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n  \r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n","import { DocumentValue, IndexableDocument, OptimizationResult } from \"@/types\";\r\n\r\ntype DocumentContent = {\r\n    [key: string]: DocumentValue | DocumentContent;\r\n};\r\n\r\nexport function createSearchableFields<T extends IndexableDocument>(\r\n    document: T,\r\n    fields: string[]\r\n): Record<string, string> {\r\n    const searchableFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        if (value !== undefined) {\r\n            searchableFields[field] = normalizeFieldValue(value);\r\n        }\r\n    });\r\n    return searchableFields;\r\n}\r\n\r\nexport function normalizeFieldValue(value: DocumentValue): string {\r\n    if (typeof value === 'string') {\r\n        return value.toLowerCase().trim();\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n        return Object.values(value).map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    return String(value);\r\n}\r\n\r\nexport function getNestedValue(obj: DocumentContent, path: string): DocumentValue | undefined {\r\n    const keys = path.split('.');\r\n    let current: DocumentValue | DocumentContent = obj;\r\n\r\n    for (const key of keys) {\r\n        if (current && typeof current === 'object' && !Array.isArray(current) && key in current) {\r\n            current = current[key];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return current as DocumentValue;\r\n}\r\n\r\nexport function optimizeIndex<T extends IndexableDocument>(data: T[]): OptimizationResult<T> {\r\n    const uniqueData = Array.from(new Set(data.map(item =>\r\n        JSON.stringify(item)\r\n    ))).map(item => JSON.parse(item)) as T[];\r\n\r\n    const sorted = uniqueData.sort((a, b) =>\r\n        JSON.stringify(a).localeCompare(JSON.stringify(b))\r\n    );\r\n\r\n    return {\r\n        data: sorted,\r\n        stats: {\r\n            originalSize: data.length,\r\n            optimizedSize: sorted.length,\r\n            compressionRatio: sorted.length / data.length\r\n        }\r\n    };\r\n}","import { SearchOptions, IndexConfig, SearchableDocument } from \"@/types\";\r\nimport { getNestedValue } from \"./SearchUtils\";\r\n\r\nexport function validateSearchOptions(options: SearchOptions): void {\r\n    if (options.maxResults && options.maxResults < 1) {\r\n        throw new Error('maxResults must be greater than 0');\r\n    }\r\n    if (options.threshold && (options.threshold < 0 || options.threshold > 1)) {\r\n        throw new Error('threshold must be between 0 and 1');\r\n    }\r\n    if (options.fields && !Array.isArray(options.fields)) {\r\n        throw new Error('fields must be an array');\r\n    }\r\n}\r\n\r\nexport function validateIndexConfig(config: IndexConfig): void {\r\n    if (!config.name) {\r\n        throw new Error('Index name is required');\r\n    }\r\n    if (!config.version || typeof config.version !== 'number') {\r\n        throw new Error('Valid version number is required');\r\n    }\r\n    if (!Array.isArray(config.fields) || config.fields.length === 0) {\r\n        throw new Error('At least one field must be specified for indexing');\r\n    }\r\n}\r\n\r\nexport function validateDocument(document: SearchableDocument, fields: string[]): boolean {\r\n    return fields.every(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        return value !== undefined;\r\n    });\r\n}","export class DataMapper {\r\n  private dataMap: Map<string, Set<string>>;\r\n\r\n  constructor() {\r\n    this.dataMap = new Map();\r\n  }\r\n\r\n  mapData(key: string, documentId: string): void {\r\n    if (!this.dataMap.has(key)) {\r\n      this.dataMap.set(key, new Set());\r\n    }\r\n    this.dataMap.get(key)!.add(documentId);\r\n  }\r\n\r\n  getDocuments(key: string): Set<string> {\r\n    return this.dataMap.get(key) || new Set();\r\n  }\r\n\r\n  getAllKeys(): string[] {\r\n    return Array.from(this.dataMap.keys());\r\n  }\r\n\r\n  exportState(): Record<string, string[]> {\r\n    const serializedMap: Record<string, string[]> = {};\r\n    \r\n    this.dataMap.forEach((value, key) => {\r\n      serializedMap[key] = Array.from(value);\r\n    });\r\n\r\n    return serializedMap;\r\n  }\r\n\r\n  importState(state: Record<string, string[]>): void {\r\n    this.dataMap.clear();\r\n    \r\n    Object.entries(state).forEach(([key, value]) => {\r\n      this.dataMap.set(key, new Set(value));\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.dataMap.clear();\r\n  }\r\n}","export class TrieNode {\r\n  children: Map<string, TrieNode>;\r\n  isEndOfWord: boolean;\r\n  documentRefs: Set<string>;\r\n  weight: number;\r\n\r\n  constructor() {\r\n      this.children = new Map();\r\n      this.isEndOfWord = false;\r\n      this.documentRefs = new Set();\r\n      this.weight = 0.0;\r\n  }\r\n}","import { TrieNode } from './TrieNode';\r\nimport { DocumentLink } from '../../types/document';\r\nimport { IndexableDocument } from '../../types/utils';\r\nimport { SerializedState, SerializedTrieNode } from '@/types';\r\n\r\n\r\n\r\nexport class TrieSearch {\r\n    private root: TrieNode;\r\n    private documents: Map<string, IndexableDocument>;\r\n    private documentLinks: Map<string, DocumentLink[]>;\r\n\r\n    constructor() {\r\n        this.root = new TrieNode();\r\n        this.documents = new Map();\r\n        this.documentLinks = new Map();\r\n    }\r\n\r\n    // Main methods remain the same\r\n\r\n    public exportState(): SerializedState {\r\n        return {\r\n            trie: this.serializeNode(this.root),\r\n            documents: Array.from(this.documents.entries()),\r\n            documentLinks: Array.from(this.documentLinks.entries())\r\n        };\r\n    }\r\n\r\n    public importState(state: SerializedState): void {\r\n        this.root = this.deserializeNode(state.trie);\r\n\r\n        if (state.documents) {\r\n            this.documents = new Map(state.documents);\r\n        }\r\n\r\n        if (state.documentLinks) {\r\n            this.documentLinks = new Map(state.documentLinks);\r\n        }\r\n    }\r\n    \r\n    insert(word: string, documentId: string): void {\r\n        let current = this.root;\r\n        \r\n        for (const char of word.toLowerCase()) {\r\n            if (!current.children.has(char)) {\r\n                current.children.set(char, new TrieNode());\r\n            }\r\n            current = current.children.get(char)!;\r\n        }\r\n        \r\n        current.isEndOfWord = true;\r\n        current.documentRefs.add(documentId);\r\n    }\r\n\r\n    search(prefix: string, maxResults: number = 10): Set<string> {\r\n        const results = new Set<string>();\r\n        let current = this.root;\r\n\r\n        // Navigate to prefix endpoint\r\n        for (const char of prefix.toLowerCase()) {\r\n            if (!current.children.has(char)) {\r\n                return results;\r\n            }\r\n            current = current.children.get(char)!;\r\n        }\r\n\r\n        // Collect all document references below this point\r\n        this.collectDocumentRefs(current, results, maxResults);\r\n        return results;\r\n    }\r\n\r\n    fuzzySearch(word: string, maxDistance: number = 2): Set<string> {\r\n        const results = new Set<string>();\r\n        this.fuzzySearchHelper(word.toLowerCase(), this.root, '', maxDistance, results);\r\n        return results;\r\n    }\r\n\r\n    private collectDocumentRefs(node: TrieNode, results: Set<string>, maxResults: number): void {\r\n        if (node.isEndOfWord) {\r\n            for (const docId of node.documentRefs) {\r\n                if (results.size >= maxResults) return;\r\n                results.add(docId);\r\n            }\r\n        }\r\n\r\n        for (const child of node.children.values()) {\r\n            if (results.size >= maxResults) return;\r\n            this.collectDocumentRefs(child, results, maxResults);\r\n        }\r\n    }\r\n\r\n    private fuzzySearchHelper(\r\n        word: string,\r\n        node: TrieNode,\r\n        currentWord: string,\r\n        maxDistance: number,\r\n        results: Set<string>\r\n    ): void {\r\n        if (maxDistance < 0) return;\r\n\r\n        if (node.isEndOfWord) {\r\n            const distance = this.calculateLevenshteinDistance(word, currentWord);\r\n            if (distance <= maxDistance) {\r\n                node.documentRefs.forEach(id => results.add(id));\r\n            }\r\n        }\r\n\r\n        if (maxDistance > 0) {\r\n            for (const [char, childNode] of node.children) {\r\n                // Handle substitution\r\n                const newDistance = word[currentWord.length] !== char ? maxDistance - 1 : maxDistance;\r\n                this.fuzzySearchHelper(word, childNode, currentWord + char, newDistance, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    private calculateLevenshteinDistance(s1: string, s2: string): number {\r\n        const dp: number[][] = Array(s1.length + 1).fill(0)\r\n            .map(() => Array(s2.length + 1).fill(0));\r\n\r\n        for (let i = 0; i <= s1.length; i++) dp[i][0] = i;\r\n        for (let j = 0; j <= s2.length; j++) dp[0][j] = j;\r\n\r\n        for (let i = 1; i <= s1.length; i++) {\r\n            for (let j = 1; j <= s2.length; j++) {\r\n                dp[i][j] = Math.min(\r\n                    dp[i - 1][j] + 1,\r\n                    dp[i][j - 1] + 1,\r\n                    dp[i - 1][j - 1] + (s1[i - 1] !== s2[j - 1] ? 1 : 0)\r\n                );\r\n            }\r\n        }\r\n\r\n        return dp[s1.length][s2.length];\r\n    }\r\n\r\n     \r\n\r\n    /**\r\n     * Serializes a TrieNode for persistence\r\n     */\r\n    private serializeNode(node: TrieNode): SerializedTrieNode {\r\n        const children: { [key: string]: SerializedTrieNode } = {};\r\n        \r\n        node.children.forEach((childNode, char) => {\r\n            children[char] = this.serializeNode(childNode);\r\n        });\r\n\r\n        return {\r\n            isEndOfWord: node.isEndOfWord,\r\n            documentRefs: Array.from(node.documentRefs),\r\n            children\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Deserializes a node from its serialized form\r\n     */\r\n    private deserializeNode(serialized: SerializedTrieNode): TrieNode {\r\n        const node = new TrieNode();\r\n        node.isEndOfWord = serialized.isEndOfWord;\r\n        node.documentRefs = new Set(serialized.documentRefs);\r\n\r\n        Object.entries(serialized.children).forEach(([char, childData]) => {\r\n            node.children.set(char, this.deserializeNode(childData));\r\n        });\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Clears all data from the trie\r\n     */\r\n    clear(): void {\r\n        this.root = new TrieNode();\r\n        this.documents.clear();\r\n        this.documentLinks.clear();\r\n    }\r\n\r\n    /**\r\n     * Gets the current size of the trie\r\n     */\r\n    getSize(): number {\r\n        return this.documents.size;\r\n    }\r\n}","import { TrieSearch } from \"@/algorithms/trie\";\r\nimport {  SearchableDocument, SearchResult, SerializedState } from \"@/types\";\r\nimport { DataMapper } from \"./DataMapper\";\r\n\r\nexport class IndexMapper {\r\n  private dataMapper: DataMapper;\r\n  private trieSearch: TrieSearch;\r\n\r\n  constructor() {\r\n    this.dataMapper = new DataMapper();\r\n    this.trieSearch = new TrieSearch();\r\n  }\r\n\r\n  indexDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    fields.forEach(field => {\r\n        const value = document[field];\r\n        if (typeof value === 'string') {\r\n            const words = this.tokenizeText(value);\r\n            words.forEach(word => {\r\n                this.trieSearch.insert(word, id);\r\n                this.dataMapper.mapData(word.toLowerCase(), id);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n  search(query: string, options: { fuzzy?: boolean; maxResults?: number } = {}): SearchResult<string>[] {\r\n    const { fuzzy = false, maxResults = 10 } = options;\r\n    const searchTerms = this.tokenizeText(query);\r\n    \r\n    const documentScores = new Map<string, { score: number; matches: Set<string> }>();\r\n\r\n    searchTerms.forEach(term => {\r\n      const documentIds = fuzzy\r\n        ? this.trieSearch.fuzzySearch(term)\r\n        : this.trieSearch.search(term, maxResults);\r\n\r\n      documentIds.forEach(id => {\r\n        const current = documentScores.get(id) || { score: 0, matches: new Set<string>() };\r\n        current.score += this.calculateScore(id, term);\r\n        current.matches.add(term);\r\n        documentScores.set(id, current);\r\n      });\r\n    });\r\n\r\n    const results = Array.from(documentScores.entries())\r\n      .map(([id, { score, matches }]) => ({\r\n        item: id,\r\n        score: score / searchTerms.length,\r\n        matches: Array.from(matches)\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    return results.slice(0, maxResults);\r\n  }\r\n\r\n  exportState(): unknown {\r\n    return {\r\n      trie: this.trieSearch.exportState(),\r\n      dataMap: this.dataMapper.exportState()\r\n    };\r\n  }\r\n\r\n  importState(state: { trie: SerializedState; dataMap: Record<string, string[]> }): void {\r\n    if (!state || !state.trie || !state.dataMap) {\r\n        throw new Error('Invalid index state');\r\n    }\r\n\r\n    this.trieSearch = new TrieSearch();\r\n    this.trieSearch.importState(state.trie );\r\n    this.dataMapper = new DataMapper();\r\n    this.dataMapper.importState(state.dataMap);\r\n}\r\n\r\n\r\n  private tokenizeText(text: string): string[] {\r\n    return text\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0);\r\n  }\r\n\r\n  private calculateScore(documentId: string, term: string): number {\r\n    const baseScore = this.dataMapper.getDocuments(term.toLowerCase()).has(documentId) ? 1.0 : 0.5;\r\n    return baseScore\r\n  \r\n  }\r\n  clear(): void {\r\n    this.trieSearch = new TrieSearch();\r\n    this.dataMapper = new DataMapper();\r\n  }\r\n}\r\n","import { IndexMapper } from \"@/mappers\";\r\nimport { IndexConfig, SearchOptions, SearchResult, IndexedDocument, SearchableDocument, SerializedState } from \"@/types\";\r\nimport { SerializedIndex } from \"@/types/core\";\r\nimport { createSearchableFields } from \"@/utils\";\r\n\r\n\r\nexport class IndexManager {\r\n    private indexMapper: IndexMapper;\r\n    private config: IndexConfig;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: IndexConfig) {\r\n        this.config = config;\r\n        this.indexMapper = new IndexMapper();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        documents.forEach((doc, index) => {\r\n            const id = this.generateDocumentId(index);\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: doc.fields,\r\n                    id: \"\"\r\n                }, this.config.fields),\r\n                metadata: doc.metadata\r\n            };\r\n            this.documents.set(id, { ...doc, id }); \r\n            this.indexMapper.indexDocument(searchableDoc, id, this.config.fields);\r\n        });\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(query: string, options: SearchOptions): Promise<SearchResult<T>[]> {\r\n        const searchResults = this.indexMapper.search(query, {\r\n            fuzzy: options.fuzzy,\r\n            maxResults: options.maxResults\r\n        });\r\n\r\n        return searchResults.map(result => ({\r\n            item: this.documents.get(result.item) as T,\r\n            score: result.score,\r\n            matches: result.matches\r\n        }));\r\n    }\r\n\r\n    exportIndex(): SerializedIndex {\r\n        return {\r\n            documents: Array.from(this.documents.entries()).map(([key, value]) => ({\r\n                key,\r\n                value: this.serializeDocument(value)\r\n            })),\r\n            indexState: this.indexMapper.exportState(),\r\n            config: this.config\r\n        };\r\n    }\r\n    \r\n    importIndex(data: unknown): void {\r\n        if (!this.isValidIndexData(data)) {\r\n            throw new Error('Invalid index data format');\r\n        }\r\n        try {\r\n            this.documents = new Map(\r\n                (data as SerializedIndex).documents.map(item => [item.key, item.value])\r\n            );\r\n            this.config = (data as SerializedIndex).config;\r\n            this.indexMapper = new IndexMapper();\r\n    \r\n            const indexState = (data as SerializedIndex).indexState;\r\n            if (indexState && typeof indexState === 'object' && 'trie' in indexState && 'dataMap' in indexState) {\r\n                this.indexMapper.importState({\r\n                    trie: indexState.trie as SerializedState,\r\n                    dataMap: indexState.dataMap as Record<string, string[]>\r\n                });\r\n            } else {\r\n                throw new Error('Invalid index state format');\r\n            }\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to import index: ${message}`);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.documents.clear();\r\n        this.indexMapper = new IndexMapper();\r\n    }\r\n\r\n    private generateDocumentId(index: number): string {\r\n        return `${this.config.name}-${index}-${Date.now()}`;\r\n    }\r\n\r\n    private isValidIndexData(data: unknown): data is SerializedIndex {\r\n        if (!data || typeof data !== 'object') return false;\r\n        \r\n        const indexData = data as Partial<SerializedIndex>;\r\n        return Boolean(\r\n            indexData.documents &&\r\n            Array.isArray(indexData.documents) &&\r\n            indexData.indexState !== undefined &&\r\n            indexData.config &&\r\n            typeof indexData.config === 'object'\r\n        );\r\n    }\r\n\r\n    private serializeDocument(doc: IndexedDocument): IndexedDocument {\r\n        return JSON.parse(JSON.stringify(doc));\r\n    }\r\n}","import { QueryToken } from \"@/types\";\r\n\r\n\r\nexport class QueryProcessor {\r\n  private readonly STOP_WORDS = new Set([\r\n    'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for',\r\n    'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on',\r\n    'that', 'the', 'to', 'was', 'were', 'will', 'with'\r\n  ]);\r\n\r\n  process(query: string): string {\r\n    const tokens = this.tokenize(query);\r\n    const processedTokens = this.processTokens(tokens);\r\n    return this.optimizeQuery(processedTokens);\r\n  }\r\n\r\n  private tokenize(query: string): QueryToken[] {\r\n    return query\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(term => term.length > 0)\r\n      .map(term => this.classifyToken(term));\r\n  }\r\n\r\n  private classifyToken(term: string): QueryToken {\r\n    if (term.startsWith('+') || term.startsWith('-')) {\r\n      return { type: 'operator', value: term };\r\n    }\r\n    if (term.includes(':')) {\r\n      return { type: 'modifier', value: term };\r\n    }\r\n    return { type: 'term', value: term };\r\n  }\r\n\r\n  private processTokens(tokens: QueryToken[]): QueryToken[] {\r\n    return tokens\r\n      .filter(token => \r\n        token.type !== 'term' || !this.STOP_WORDS.has(token.value)\r\n      )\r\n      .map(token => this.normalizeToken(token));\r\n  }\r\n\r\n  private normalizeToken(token: QueryToken): QueryToken {\r\n    if (token.type === 'term') {\r\n      // Basic stemming (could be enhanced with proper stemming algorithm)\r\n      let value = token.value;\r\n      if (value.endsWith('ing')) value = value.slice(0, -3);\r\n      if (value.endsWith('s')) value = value.slice(0, -1);\r\n      return { ...token, value };\r\n    }\r\n    return token;\r\n  }\r\n\r\n  private optimizeQuery(tokens: QueryToken[]): string {\r\n    return tokens\r\n      .map(token => token.value)\r\n      .join(' ');\r\n  }\r\n}","import { CacheManager } from \"@/storage\";\r\nimport { SearchStorage } from \"@/storage/IndexedDBService\";\r\nimport { IndexConfig, SearchOptions, SearchResult, IndexedDocument } from \"@/types\";\r\nimport { validateSearchOptions } from \"@/utils\";\r\nimport { IndexManager } from \"./IndexManager\";\r\nimport { QueryProcessor } from \"./QueryProcessor\";\r\n\r\nexport class SearchEngine {\r\n    private indexManager: IndexManager;\r\n    private queryProcessor: QueryProcessor;\r\n    private storage: SearchStorage;\r\n    private cache: CacheManager;\r\n    private config: IndexConfig;\r\n\r\n    constructor(config: IndexConfig) {\r\n        this.config = config;\r\n        this.indexManager = new IndexManager(config);\r\n        this.queryProcessor = new QueryProcessor();\r\n        this.storage = new SearchStorage();\r\n        this.cache = new CacheManager();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        try {\r\n            await this.storage.initialize();\r\n            await this.loadIndexes();\r\n        } catch (error) {\r\n            throw new Error(`Failed to initialize search engine: ${error}`);\r\n        }\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        try {\r\n            await this.indexManager.addDocuments(documents);\r\n            await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n        } catch (error) {\r\n            throw new Error(`Failed to add documents: ${error}`);\r\n        }\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(query: string, options: SearchOptions = {}): Promise<SearchResult<T>[]> {\r\n        validateSearchOptions(options);\r\n\r\n        const cacheKey = this.generateCacheKey(query, options);\r\n        const cachedResults = this.cache.get(cacheKey);\r\n\r\n        if (cachedResults) {\r\n            return cachedResults as SearchResult<T>[];\r\n        }\r\n\r\n        const processedQuery = this.queryProcessor.process(query);\r\n        const results = await this.indexManager.search<T>(processedQuery, options);\r\n\r\n        this.cache.set(cacheKey, results);\r\n        return results;\r\n    }\r\n\r\n    private async loadIndexes(): Promise<void> {\r\n        const storedIndex = await this.storage.getIndex(this.config.name);\r\n        if (storedIndex) {\r\n            this.indexManager.importIndex(storedIndex);\r\n        }\r\n    }\r\n\r\n    private generateCacheKey(query: string, options: SearchOptions): string {\r\n        return `${query}-${JSON.stringify(options)}`;\r\n    }\r\n\r\n    async clearIndex(): Promise<void> {\r\n        await this.storage.clearIndices();\r\n        this.indexManager.clear();\r\n        this.cache.clear();\r\n    }\r\n}","export class SearchError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'SearchError';\r\n  }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'IndexError';\r\n  }\r\n}\r\n\r\nexport class ValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n  }\r\n}\r\n\r\nexport class StorageError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'StorageError';\r\n  }\r\n}","// Import all types from a single barrel file\r\nimport type {\r\n    IndexConfig,\r\n    IndexOptions,\r\n    SearchContext,\r\n    SearchOptions,\r\n    SearchResult,\r\n    SearchStats,\r\n    SearchEventType,\r\n    SearchEvent,\r\n    DocumentLink,\r\n    DocumentRank,\r\n} from './types/index';\r\n\r\nexport { SearchContext,SearchStats, SearchEvent,SearchEventType,DocumentLink,DocumentRank}\r\n// Core imports\r\nimport { SearchEngine } from './core/SearchEngine';\r\nimport { IndexManager } from './core/IndexManager';\r\nimport { QueryProcessor } from './core/QueryProcessor';\r\n\r\n// Algorithm imports\r\nimport { TrieNode } from './algorithms/trie/TrieNode';\r\nimport { TrieSearch } from './algorithms/trie/TrieSearch';\r\n\r\n// Mapper imports\r\nimport { DataMapper } from './mappers/DataMapper';\r\nimport { IndexMapper } from './mappers/IndexMapper';\r\n\r\n// Storage imports\r\nimport { CacheManager } from './storage/CacheManager';\r\nimport { IndexedDB } from './storage/IndexedDBService';\r\n\r\n// Utility imports\r\nimport {\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n} from './utils/index';\r\n\r\n// Re-export all types\r\nexport * from './types/index';\r\n\r\n// Constants\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10\r\n};\r\n\r\n// Error classes\r\nexport class SearchError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SearchError';\r\n    }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'IndexError';\r\n    }\r\n}\r\n\r\n// Type guards\r\nexport function isSearchOptions(obj: unknown): obj is SearchOptions {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const options = obj as Partial<SearchOptions>;\r\n    \r\n    return (\r\n        (typeof options.fuzzy === 'undefined' || typeof options.fuzzy === 'boolean') &&\r\n        (typeof options.maxResults === 'undefined' || typeof options.maxResults === 'number')\r\n    );\r\n}\r\n\r\nexport function isIndexConfig(obj: unknown): obj is IndexConfig {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const config = obj as Partial<IndexConfig>;\r\n    \r\n    return Boolean(\r\n        typeof config.name === 'string' &&\r\n        typeof config.version === 'number' &&\r\n        Array.isArray(config.fields)\r\n    );\r\n}\r\n\r\nexport function isSearchResult<T>(obj: unknown): obj is SearchResult<T> {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const result = obj as Partial<SearchResult<T>>;\r\n    \r\n    return Boolean(\r\n        'item' in result &&\r\n        typeof result.score === 'number' &&\r\n        Array.isArray(result.matches)\r\n    );\r\n}\r\n\r\n// Export individual components\r\nexport {\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    DataMapper,\r\n    IndexMapper,\r\n    CacheManager,\r\n    IndexedDB,\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n};\r\n\r\n// Create consolidated export object\r\nexport const NexusSearch = {\r\n    DEFAULT_INDEX_OPTIONS,\r\n    DEFAULT_SEARCH_OPTIONS,\r\n    SearchError,\r\n    IndexError,\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    isSearchOptions,\r\n    isIndexConfig,\r\n    isSearchResult,\r\n} as const;\r\n\r\nexport default NexusSearch;","import { MetricsResult, PerformanceMetric } from \"@/types\";\r\n\r\nexport class PerformanceMonitor {\r\n    private metrics: Map<string, number[]>;\r\n\r\n    constructor() {\r\n        this.metrics = new Map();\r\n    }\r\n\r\n    async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n        const start = performance.now();\r\n        try {\r\n            return await fn();\r\n        } finally {\r\n            const duration = performance.now() - start;\r\n            this.recordMetric(name, duration);\r\n        }\r\n    }\r\n\r\n    private recordMetric(name: string, duration: number): void {\r\n        if (!this.metrics.has(name)) {\r\n            this.metrics.set(name, []);\r\n        }\r\n        this.metrics.get(name)!.push(duration);\r\n    }\r\n\r\n    getMetrics(): MetricsResult {\r\n        const results: MetricsResult = {};\r\n\r\n        this.metrics.forEach((durations, name) => {\r\n            results[name] = {\r\n                avg: this.average(durations),\r\n                min: Math.min(...durations),\r\n                max: Math.max(...durations),\r\n                count: durations.length\r\n            } as PerformanceMetric;\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    private average(numbers: number[]): number {\r\n        return numbers.reduce((a, b) => a + b, 0) / numbers.length;\r\n    }\r\n\r\n    clear(): void {\r\n        this.metrics.clear();\r\n    }\r\n}"],"names":["CacheManager","constructor","maxSize","ttlMinutes","this","cache","Map","ttl","set","key","data","size","evictOldest","timestamp","Date","now","get","entry","isExpired","delete","oldestKey","oldestTime","Infinity","entries","clear","SearchStorage","db","DB_NAME","DB_VERSION","initPromise","initialize","openDB","upgrade","oldVersion","newVersion","transaction","objectStoreNames","contains","createObjectStore","keyPath","createIndex","blocked","console","warn","blocking","terminated","error","message","Error","ensureConnection","storeIndex","id","put","getIndex","updateMetadata","config","metadata","lastUpdated","getMetadata","clearIndices","close","createSearchableFields","document","fields","searchableFields","forEach","field","value","getNestedValue","content","undefined","normalizeFieldValue","toLowerCase","trim","Array","isArray","map","v","join","Object","values","String","obj","path","keys","split","current","validateSearchOptions","options","maxResults","threshold","DataMapper","dataMap","mapData","documentId","has","Set","add","getDocuments","getAllKeys","from","exportState","serializedMap","importState","state","TrieNode","children","isEndOfWord","documentRefs","weight","TrieSearch","root","documents","documentLinks","trie","serializeNode","deserializeNode","insert","word","char","search","prefix","results","collectDocumentRefs","fuzzySearch","maxDistance","fuzzySearchHelper","node","docId","child","currentWord","calculateLevenshteinDistance","childNode","newDistance","length","s1","s2","dp","fill","i","j","Math","min","serialized","childData","getSize","IndexMapper","dataMapper","trieSearch","indexDocument","tokenizeText","query","fuzzy","searchTerms","documentScores","term","score","matches","calculateScore","item","sort","a","b","slice","text","replace","filter","IndexManager","indexMapper","addDocuments","doc","index","generateDocumentId","searchableDoc","result","exportIndex","serializeDocument","indexState","importIndex","isValidIndexData","name","indexData","Boolean","JSON","parse","stringify","QueryProcessor","STOP_WORDS","process","tokens","tokenize","processedTokens","processTokens","optimizeQuery","classifyToken","startsWith","type","includes","token","normalizeToken","endsWith","SearchEngine","indexManager","queryProcessor","storage","loadIndexes","cacheKey","generateCacheKey","cachedResults","processedQuery","storedIndex","clearIndex","ValidationError","super","StorageError","DEFAULT_INDEX_OPTIONS","caseSensitive","stemming","stopWords","minWordLength","maxWordLength","fuzzyThreshold","DEFAULT_SEARCH_OPTIONS","sortBy","sortOrder","page","pageSize","SearchError","IndexError","isSearchOptions","isIndexConfig","version","isSearchResult","NexusSearch","deleteIndex","metrics","measure","fn","start","performance","duration","recordMetric","push","getMetrics","durations","avg","average","max","count","numbers","reduce","sorted","localeCompare","stats","originalSize","optimizedSize","compressionRatio","every"],"mappings":"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"}