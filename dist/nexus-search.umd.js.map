{"version":3,"file":"nexus-search.umd.js","sources":["../src/storage/CacheManager.ts","../src/storage/SearchStorage.ts","../src/utils/SearchUtils.ts","../src/utils/ValidationUtils.ts","../src/mappers/DataMapper.ts","../src/algorithms/trie/TrieNode.ts","../src/algorithms/trie/TrieSearch.ts","../src/mappers/IndexMapper.ts","../src/core/IndexManager.ts","../src/core/QueryProcessor.ts","../src/core/SearchEngine.ts","../src/types/errors.ts","../src/index.ts","../src/storage/IndexedDBService.ts","../src/utils/PerformanceUtils.ts"],"sourcesContent":["import { SearchResult } from \"@/types\";\r\n\r\n\r\n\r\nexport class CacheManager {\r\n  private cache: Map<string, { data: SearchResult<any>[]; timestamp: number }>;\r\n  private readonly maxSize: number;\r\n  private readonly ttl: number; // Time to live in milliseconds\r\n\r\n  constructor(maxSize: number = 1000, ttlMinutes: number = 5) {\r\n    this.cache = new Map();\r\n    this.maxSize = maxSize;\r\n    this.ttl = ttlMinutes * 60 * 1000;\r\n  }\r\n\r\n  set(key: string, data: SearchResult<any>[]): void {\r\n    if (this.cache.size >= this.maxSize) {\r\n      this.evictOldest();\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n\r\n  get(key: string): SearchResult<any>[] | null {\r\n    const entry = this.cache.get(key);\r\n    \r\n    if (!entry) return null;\r\n    \r\n    if (this.isExpired(entry.timestamp)) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return entry.data;\r\n  }\r\n\r\n  private isExpired(timestamp: number): boolean {\r\n    return Date.now() - timestamp > this.ttl;\r\n  }\r\n\r\n  private evictOldest(): void {\r\n    let oldestKey: string | null = null;\r\n    let oldestTime = Infinity;\r\n\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (entry.timestamp < oldestTime) {\r\n        oldestTime = entry.timestamp;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    if (oldestKey) {\r\n      this.cache.delete(oldestKey);\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}","import { openDB, IDBPDatabase } from 'idb';\nimport type { SearchDBSchema, StorageOptions } from '@/types';\n\nexport class SearchStorage {\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\n    private memoryStorage: Map<string, unknown> = new Map();\n    private storageType: 'indexeddb' | 'memory';\n\n    constructor(options: StorageOptions = {\n        type: 'memory'\n    }) {\n        this.storageType = this.determineStorageType(options);\n    }\n\n    private determineStorageType(options: StorageOptions): 'indexeddb' | 'memory' {\n        // Use memory storage if explicitly specified or if in Node.js environment\n        if (options.type === 'memory' || !this.isIndexedDBAvailable()) {\n            return 'memory';\n        }\n        return 'indexeddb';\n    }\n\n    private isIndexedDBAvailable(): boolean {\n        try {\n            return typeof indexedDB !== 'undefined' && indexedDB !== null;\n        } catch {\n            return false;\n        }\n    }\n\n    async initialize(): Promise<void> {\n        if (this.storageType === 'memory') {\n            // No initialization needed for memory storage\n            return;\n        }\n\n        try {\n            this.db = await openDB<SearchDBSchema>('nexus-search-db', 1, {\n                upgrade(db) {\n                    const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\n                    indexStore.createIndex('timestamp', 'timestamp');\n\n                    const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\n                    metaStore.createIndex('lastUpdated', 'lastUpdated');\n                }\n            });\n        } catch (error) {\n            // Fallback to memory storage if IndexedDB fails\n            this.storageType = 'memory';\n            console.warn('Failed to initialize IndexedDB, falling back to memory storage:', error);\n        }\n    }\n\n    async storeIndex(name: string, data: unknown): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.set(name, data);\n            return;\n        }\n\n        try {\n            await this.db?.put('searchIndices', {\n                id: name,\n                data,\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.error('Storage error:', error);\n            // Fallback to memory storage\n            this.memoryStorage.set(name, data);\n        }\n    }\n\n    async getIndex(name: string): Promise<unknown> {\n        if (this.storageType === 'memory') {\n            return this.memoryStorage.get(name);\n        }\n\n        try {\n            const entry = await this.db?.get('searchIndices', name);\n            return entry?.data;\n        } catch (error) {\n            console.error('Retrieval error:', error);\n            // Fallback to memory storage\n            return this.memoryStorage.get(name);\n        }\n    }\n\n    async clearIndices(): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.clear();\n            return;\n        }\n\n        try {\n            await this.db?.clear('searchIndices');\n        } catch (error) {\n            console.error('Clear error:', error);\n            this.memoryStorage.clear();\n        }\n    }\n\n    async close(): Promise<void> {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n        this.memoryStorage.clear();\n    }\n}","import { DocumentValue, IndexableDocument, OptimizationResult } from \"@/types\";\r\n\r\ntype DocumentContent = {\r\n    [key: string]: DocumentValue | DocumentContent;\r\n};\r\n\r\nexport function createSearchableFields<T extends IndexableDocument>(\r\n    document: T,\r\n    fields: string[]\r\n): Record<string, string> {\r\n    const searchableFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        if (value !== undefined) {\r\n            searchableFields[field] = normalizeFieldValue(value);\r\n        }\r\n    });\r\n    return searchableFields;\r\n}\r\n\r\nexport function normalizeFieldValue(value: DocumentValue): string {\r\n    if (typeof value === 'string') {\r\n        return value.toLowerCase().trim();\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n        return Object.values(value).map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    return String(value);\r\n}\r\n\r\nexport function getNestedValue(obj: DocumentContent, path: string): DocumentValue | undefined {\r\n    const keys = path.split('.');\r\n    let current: DocumentValue | DocumentContent = obj;\r\n\r\n    for (const key of keys) {\r\n        if (current && typeof current === 'object' && !Array.isArray(current) && key in current) {\r\n            current = current[key];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return current as DocumentValue;\r\n}\r\n\r\nexport function optimizeIndex<T extends IndexableDocument>(data: T[]): OptimizationResult<T> {\r\n    const uniqueData = Array.from(new Set(data.map(item =>\r\n        JSON.stringify(item)\r\n    ))).map(item => JSON.parse(item)) as T[];\r\n\r\n    const sorted = uniqueData.sort((a, b) =>\r\n        JSON.stringify(a).localeCompare(JSON.stringify(b))\r\n    );\r\n\r\n    return {\r\n        data: sorted,\r\n        stats: {\r\n            originalSize: data.length,\r\n            optimizedSize: sorted.length,\r\n            compressionRatio: sorted.length / data.length\r\n        }\r\n    };\r\n}","import { SearchOptions, IndexConfig, SearchableDocument } from \"@/types\";\r\nimport { getNestedValue } from \"./SearchUtils\";\r\n\r\nexport function validateSearchOptions(options: SearchOptions): void {\r\n    if (options.maxResults && options.maxResults < 1) {\r\n        throw new Error('maxResults must be greater than 0');\r\n    }\r\n    if (options.threshold && (options.threshold < 0 || options.threshold > 1)) {\r\n        throw new Error('threshold must be between 0 and 1');\r\n    }\r\n    if (options.fields && !Array.isArray(options.fields)) {\r\n        throw new Error('fields must be an array');\r\n    }\r\n}\r\n\r\nexport function validateIndexConfig(config: IndexConfig): void {\r\n    if (!config.name) {\r\n        throw new Error('Index name is required');\r\n    }\r\n    if (!config.version || typeof config.version !== 'number') {\r\n        throw new Error('Valid version number is required');\r\n    }\r\n    if (!Array.isArray(config.fields) || config.fields.length === 0) {\r\n        throw new Error('At least one field must be specified for indexing');\r\n    }\r\n}\r\n\r\nexport function validateDocument(document: SearchableDocument, fields: string[]): boolean {\r\n    return fields.every(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        return value !== undefined;\r\n    });\r\n}","export class DataMapper {\r\n  private dataMap: Map<string, Set<string>>;\r\n\r\n  constructor() {\r\n    this.dataMap = new Map();\r\n  }\r\n\r\n  mapData(key: string, documentId: string): void {\r\n    if (!this.dataMap.has(key)) {\r\n      this.dataMap.set(key, new Set());\r\n    }\r\n    this.dataMap.get(key)!.add(documentId);\r\n  }\r\n\r\n  getDocuments(key: string): Set<string> {\r\n    return this.dataMap.get(key) || new Set();\r\n  }\r\n\r\n  getAllKeys(): string[] {\r\n    return Array.from(this.dataMap.keys());\r\n  }\r\n\r\n  exportState(): Record<string, string[]> {\r\n    const serializedMap: Record<string, string[]> = {};\r\n    \r\n    this.dataMap.forEach((value, key) => {\r\n      serializedMap[key] = Array.from(value);\r\n    });\r\n\r\n    return serializedMap;\r\n  }\r\n\r\n  importState(state: Record<string, string[]>): void {\r\n    this.dataMap.clear();\r\n    \r\n    Object.entries(state).forEach(([key, value]) => {\r\n      this.dataMap.set(key, new Set(value));\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.dataMap.clear();\r\n  }\r\n}","export class TrieNode {\r\n  children: Map<string, TrieNode>;\r\n  isEndOfWord: boolean;\r\n  documentRefs: Set<string>;\r\n  weight: number;\r\n\r\n  constructor() {\r\n      this.children = new Map();\r\n      this.isEndOfWord = false;\r\n      this.documentRefs = new Set();\r\n      this.weight = 0.0;\r\n  }\r\n}","import { TrieNode } from './TrieNode';\r\nimport { DocumentLink, IndexableDocument } from '../../types/document';\r\nimport { SerializedState, SerializedTrieNode } from '@/types';\r\n\r\nexport class TrieSearch {\r\n    private root: TrieNode;\r\n    private documents: Map<string, IndexableDocument>;\r\n    private documentLinks: Map<string, DocumentLink[]>;\r\n\r\n    constructor() {\r\n        this.root = new TrieNode();\r\n        this.documents = new Map();\r\n        this.documentLinks = new Map();\r\n    }\r\n\r\n    public insert(text: string, documentId: string): void {\r\n        // Handle empty or invalid input\r\n        if (!text || !documentId) return;\r\n\r\n        const words = text.toLowerCase().split(/\\s+/).filter(Boolean);\r\n        \r\n        for (const word of words) {\r\n            let current = this.root;\r\n            \r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    current.children.set(char, new TrieNode());\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n            \r\n            current.isEndOfWord = true;\r\n            current.documentRefs.add(documentId);\r\n            current.weight += 1.0; // Increment weight for ranking\r\n        }\r\n    }\r\n\r\n    public search(query: string, maxResults: number = 10): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            let current = this.root;\r\n            let found = true;\r\n\r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    found = false;\r\n                    break;\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n\r\n            if (found) {\r\n                this.collectDocumentRefs(current, results, maxResults);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public fuzzySearch(query: string, maxDistance: number = 2): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            this.fuzzySearchHelper(word, this.root, '', maxDistance, results);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private collectDocumentRefs(node: TrieNode, results: Set<string>, maxResults: number): void {\r\n        if (node.isEndOfWord) {\r\n            for (const docId of node.documentRefs) {\r\n                if (results.size >= maxResults) return;\r\n                results.add(docId);\r\n            }\r\n        }\r\n\r\n        for (const child of node.children.values()) {\r\n            if (results.size >= maxResults) return;\r\n            this.collectDocumentRefs(child, results, maxResults);\r\n        }\r\n    }\r\n\r\n    private fuzzySearchHelper(\r\n        word: string,\r\n        node: TrieNode,\r\n        currentWord: string,\r\n        maxDistance: number,\r\n        results: Set<string>\r\n    ): void {\r\n        if (maxDistance < 0) return;\r\n\r\n        if (node.isEndOfWord) {\r\n            const distance = this.calculateLevenshteinDistance(word, currentWord);\r\n            if (distance <= maxDistance) {\r\n                node.documentRefs.forEach(id => results.add(id));\r\n            }\r\n        }\r\n\r\n        for (const [char, childNode] of node.children) {\r\n            // Handle substitution, deletion, and insertion\r\n            const newDistance = word[currentWord.length] !== char ? maxDistance - 1 : maxDistance;\r\n            this.fuzzySearchHelper(word, childNode, currentWord + char, newDistance, results);\r\n            \r\n            // Handle deletion\r\n            if (maxDistance > 0) {\r\n                this.fuzzySearchHelper(word, childNode, currentWord, maxDistance - 1, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    private calculateLevenshteinDistance(s1: string, s2: string): number {\r\n        const dp: number[][] = Array(s1.length + 1).fill(0)\r\n            .map(() => Array(s2.length + 1).fill(0));\r\n\r\n        for (let i = 0; i <= s1.length; i++) dp[i][0] = i;\r\n        for (let j = 0; j <= s2.length; j++) dp[0][j] = j;\r\n\r\n        for (let i = 1; i <= s1.length; i++) {\r\n            for (let j = 1; j <= s2.length; j++) {\r\n                dp[i][j] = Math.min(\r\n                    dp[i - 1][j] + 1,\r\n                    dp[i][j - 1] + 1,\r\n                    dp[i - 1][j - 1] + (s1[i - 1] !== s2[j - 1] ? 1 : 0)\r\n                );\r\n            }\r\n        }\r\n\r\n        return dp[s1.length][s2.length];\r\n    }\r\n\r\n    public exportState(): SerializedState {\r\n        return {\r\n            trie: this.serializeNode(this.root),\r\n            documents: Array.from(this.documents.entries()),\r\n            documentLinks: Array.from(this.documentLinks.entries())\r\n        };\r\n    }\r\n\r\n    public importState(state: SerializedState): void {\r\n        this.root = this.deserializeNode(state.trie);\r\n        this.documents = new Map(state.documents || []);\r\n        this.documentLinks = new Map(state.documentLinks || []);\r\n    }\r\n\r\n    private serializeNode(node: TrieNode): SerializedTrieNode {\r\n        const children: { [key: string]: SerializedTrieNode } = {};\r\n        \r\n        node.children.forEach((childNode, char) => {\r\n            children[char] = this.serializeNode(childNode);\r\n        });\r\n\r\n        return {\r\n            isEndOfWord: node.isEndOfWord,\r\n            documentRefs: Array.from(node.documentRefs),\r\n            weight: node.weight,\r\n            children\r\n        };\r\n    }\r\n\r\n    private deserializeNode(serialized: SerializedTrieNode): TrieNode {\r\n        const node = new TrieNode();\r\n        node.isEndOfWord = serialized.isEndOfWord;\r\n        node.documentRefs = new Set(serialized.documentRefs);\r\n        node.weight = serialized.weight || 0;\r\n\r\n        Object.entries(serialized.children).forEach(([char, childData]) => {\r\n            node.children.set(char, this.deserializeNode(childData));\r\n        });\r\n\r\n        return node;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.root = new TrieNode();\r\n        this.documents.clear();\r\n        this.documentLinks.clear();\r\n    }\r\n\r\n    public getSize(): number {\r\n        return this.documents.size;\r\n    }\r\n}","import { TrieSearch } from \"@/algorithms/trie\";\r\nimport {  SearchableDocument, SearchResult, SerializedState } from \"@/types\";\r\nimport { DataMapper } from \"./DataMapper\";\r\n\r\nexport class IndexMapper {\r\n  private dataMapper: DataMapper;\r\n  private trieSearch: TrieSearch;\r\n\r\n  constructor() {\r\n    this.dataMapper = new DataMapper();\r\n    this.trieSearch = new TrieSearch();\r\n  }\r\n\r\n  indexDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    fields.forEach(field => {\r\n        const value = document[field];\r\n        if (typeof value === 'string') {\r\n            const words = this.tokenizeText(value);\r\n            words.forEach(word => {\r\n                this.trieSearch.insert(word, id);\r\n                this.dataMapper.mapData(word.toLowerCase(), id);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n  search(query: string, options: { fuzzy?: boolean; maxResults?: number } = {}): SearchResult<string>[] {\r\n    const { fuzzy = false, maxResults = 10 } = options;\r\n    const searchTerms = this.tokenizeText(query);\r\n    \r\n    const documentScores = new Map<string, { score: number; matches: Set<string> }>();\r\n\r\n    searchTerms.forEach(term => {\r\n      const documentIds = fuzzy\r\n        ? this.trieSearch.fuzzySearch(term)\r\n        : this.trieSearch.search(term, maxResults);\r\n\r\n      documentIds.forEach(id => {\r\n        const current = documentScores.get(id) || { score: 0, matches: new Set<string>() };\r\n        current.score += this.calculateScore(id, term);\r\n        current.matches.add(term);\r\n        documentScores.set(id, current);\r\n      });\r\n    });\r\n\r\n    const results = Array.from(documentScores.entries())\r\n      .map(([id, { score, matches }]) => ({\r\n        item: id,\r\n        score: score / searchTerms.length,\r\n        matches: Array.from(matches)\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    return results.slice(0, maxResults);\r\n  }\r\n\r\n  exportState(): unknown {\r\n    return {\r\n      trie: this.trieSearch.exportState(),\r\n      dataMap: this.dataMapper.exportState()\r\n    };\r\n  }\r\n\r\n  importState(state: { trie: SerializedState; dataMap: Record<string, string[]> }): void {\r\n    if (!state || !state.trie || !state.dataMap) {\r\n        throw new Error('Invalid index state');\r\n    }\r\n\r\n    this.trieSearch = new TrieSearch();\r\n    this.trieSearch.importState(state.trie );\r\n    this.dataMapper = new DataMapper();\r\n    this.dataMapper.importState(state.dataMap);\r\n}\r\n\r\n\r\n  private tokenizeText(text: string): string[] {\r\n    return text\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0);\r\n  }\r\n\r\n  private calculateScore(documentId: string, term: string): number {\r\n    const baseScore = this.dataMapper.getDocuments(term.toLowerCase()).has(documentId) ? 1.0 : 0.5;\r\n    return baseScore\r\n  \r\n  }\r\n  clear(): void {\r\n    this.trieSearch = new TrieSearch();\r\n    this.dataMapper = new DataMapper();\r\n  }\r\n}\r\n","import { IndexMapper } from \"@/mappers\";\r\nimport { \r\n    IndexConfig, \r\n    SearchOptions, \r\n    SearchResult, \r\n    IndexedDocument, \r\n    SearchableDocument, \r\n    SerializedState,\r\n    DocumentValue \r\n} from \"@/types\";\r\nimport { SerializedIndex } from \"@/types/core\";\r\nimport { createSearchableFields } from \"@/utils\";\r\n\r\nexport class IndexManager {\r\n    private indexMapper: IndexMapper;\r\n    private config: IndexConfig;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: IndexConfig) {\r\n        this.config = config;\r\n        this.indexMapper = new IndexMapper();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        for (const [index, doc] of documents.entries()) {\r\n            const id = this.generateDocumentId(index);\r\n\r\n            // Convert document fields to Record<string, DocumentValue>\r\n            const contentRecord: Record<string, DocumentValue> = {};\r\n            for (const field of this.config.fields) {\r\n                if (field in doc) {\r\n                    contentRecord[field] = doc[field] as DocumentValue;\r\n                }\r\n            }\r\n\r\n            // Create searchable document with proper field extraction\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: contentRecord,\r\n                    id\r\n                }, this.config.fields),\r\n                metadata: doc.metadata\r\n            };\r\n\r\n            // Store original document with ID\r\n            this.documents.set(id, { ...doc, id });\r\n\r\n            // Index the document\r\n            try {\r\n                await this.indexMapper.indexDocument(searchableDoc, id, this.config.fields);\r\n            } catch (error) {\r\n                console.warn(`Failed to index document ${id}:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(\r\n        query: string, \r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<T>[]> {\r\n        if (!query.trim()) return [];\r\n\r\n        try {\r\n            const searchResults = await this.indexMapper.search(query, {\r\n                fuzzy: options.fuzzy ?? false,\r\n                maxResults: options.maxResults ?? 10\r\n            });\r\n\r\n            return searchResults\r\n                .filter(result => this.documents.has(result.item))\r\n                .map(result => ({\r\n                    item: this.documents.get(result.item) as T,\r\n                    score: result.score,\r\n                    matches: result.matches\r\n                }))\r\n                .filter(result => result.score >= (options.threshold ?? 0.5));\r\n\r\n        } catch (error) {\r\n            console.error('Search error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    exportIndex(): SerializedIndex {\r\n        return {\r\n            documents: Array.from(this.documents.entries()).map(([key, value]) => ({\r\n                key,\r\n                value: this.serializeDocument(value)\r\n            })),\r\n            indexState: this.indexMapper.exportState(),\r\n            config: this.config\r\n        };\r\n    }\r\n\r\n    importIndex(data: unknown): void {\r\n        if (!this.isValidIndexData(data)) {\r\n            throw new Error('Invalid index data format');\r\n        }\r\n\r\n        try {\r\n            const typedData = data as SerializedIndex;\r\n            this.documents = new Map(\r\n                typedData.documents.map(item => [item.key, item.value])\r\n            );\r\n            this.config = typedData.config;\r\n            this.indexMapper = new IndexMapper();\r\n            \r\n            if (this.isValidIndexState(typedData.indexState)) {\r\n                this.indexMapper.importState({\r\n                    trie: typedData.indexState.trie,\r\n                    dataMap: typedData.indexState.dataMap\r\n                });\r\n            } else {\r\n                throw new Error('Invalid index state format');\r\n            }\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to import index: ${message}`);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.documents.clear();\r\n        this.indexMapper = new IndexMapper();\r\n    }\r\n\r\n    private generateDocumentId(index: number): string {\r\n        return `${this.config.name}-${index}-${Date.now()}`;\r\n    }\r\n\r\n    private isValidIndexData(data: unknown): data is SerializedIndex {\r\n        if (!data || typeof data !== 'object') return false;\r\n        \r\n        const indexData = data as Partial<SerializedIndex>;\r\n        return Boolean(\r\n            indexData.documents &&\r\n            Array.isArray(indexData.documents) &&\r\n            indexData.indexState !== undefined &&\r\n            indexData.config &&\r\n            typeof indexData.config === 'object'\r\n        );\r\n    }\r\n\r\n    private isValidIndexState(state: unknown): state is { trie: SerializedState; dataMap: Record<string, string[]> } {\r\n        return (\r\n            state !== null &&\r\n            typeof state === 'object' &&\r\n            'trie' in state &&\r\n            'dataMap' in state\r\n        );\r\n    }\r\n\r\n    private serializeDocument(doc: IndexedDocument): IndexedDocument {\r\n        return JSON.parse(JSON.stringify(doc));\r\n    }\r\n}","import { QueryToken } from \"@/types\";\r\n\r\n\r\nexport class QueryProcessor {\r\n  private readonly STOP_WORDS = new Set([\r\n    'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for',\r\n    'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on',\r\n    'that', 'the', 'to', 'was', 'were', 'will', 'with'\r\n  ]);\r\n\r\n  process(query: string): string {\r\n    const tokens = this.tokenize(query);\r\n    const processedTokens = this.processTokens(tokens);\r\n    return this.optimizeQuery(processedTokens);\r\n  }\r\n\r\n  private tokenize(query: string): QueryToken[] {\r\n    return query\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(term => term.length > 0)\r\n      .map(term => this.classifyToken(term));\r\n  }\r\n\r\n  private classifyToken(term: string): QueryToken {\r\n    if (term.startsWith('+') || term.startsWith('-')) {\r\n      return { type: 'operator', value: term };\r\n    }\r\n    if (term.includes(':')) {\r\n      return { type: 'modifier', value: term };\r\n    }\r\n    return { type: 'term', value: term };\r\n  }\r\n\r\n  private processTokens(tokens: QueryToken[]): QueryToken[] {\r\n    return tokens\r\n      .filter(token => \r\n        token.type !== 'term' || !this.STOP_WORDS.has(token.value)\r\n      )\r\n      .map(token => this.normalizeToken(token));\r\n  }\r\n\r\n  private normalizeToken(token: QueryToken): QueryToken {\r\n    if (token.type === 'term') {\r\n      // Basic stemming (could be enhanced with proper stemming algorithm)\r\n      let value = token.value;\r\n      if (value.endsWith('ing')) value = value.slice(0, -3);\r\n      if (value.endsWith('s')) value = value.slice(0, -1);\r\n      return { ...token, value };\r\n    }\r\n    return token;\r\n  }\r\n\r\n  private optimizeQuery(tokens: QueryToken[]): string {\r\n    return tokens\r\n      .map(token => token.value)\r\n      .join(' ');\r\n  }\r\n}","import { CacheManager, SearchStorage } from \"@/storage\";\r\nimport { SearchOptions, SearchResult, IndexedDocument, SearchEngineConfig } from \"@/types\";\r\nimport { validateSearchOptions } from \"@/utils\";\r\nimport { IndexManager } from \"./IndexManager\";\r\nimport { QueryProcessor } from \"./QueryProcessor\";\r\n\r\n\r\n\r\nexport class SearchEngine {\r\n    private indexManager: IndexManager;\r\n    private queryProcessor: QueryProcessor;\r\n    private storage: SearchStorage;\r\n    private cache: CacheManager;\r\n    private config: SearchEngineConfig;\r\n    private isInitialized: boolean = false;\r\n\r\n    constructor(config: SearchEngineConfig) {\r\n        this.config = config;\r\n        this.indexManager = new IndexManager(config);\r\n        this.queryProcessor = new QueryProcessor();\r\n        this.storage = new SearchStorage(config.storage);\r\n        this.cache = new CacheManager();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Initialize storage with fallback handling\r\n            try {\r\n                await this.storage.initialize();\r\n            } catch (storageError) {\r\n                console.warn('Storage initialization failed, falling back to memory storage:', storageError);\r\n                // Create new memory storage instance\r\n                this.storage = new SearchStorage({ type: 'memory' });\r\n                await this.storage.initialize();\r\n            }\r\n\r\n            // Load existing indexes\r\n            await this.loadIndexes();\r\n            this.isInitialized = true;\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            throw new Error(`Failed to initialize search engine: ${errorMessage}`);\r\n        }\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        try {\r\n            // Add documents to index\r\n            await this.indexManager.addDocuments(documents);\r\n\r\n            // Store index in storage\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                console.warn('Failed to persist index, continuing in memory:', storageError);\r\n            }\r\n\r\n            // Clear cache as index has changed\r\n            this.cache.clear();\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            throw new Error(`Failed to add documents: ${errorMessage}`);\r\n        }\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(\r\n        query: string, \r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<T>[]> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        validateSearchOptions(options);\r\n\r\n        // Try cache first\r\n        const cacheKey = this.generateCacheKey(query, options);\r\n        const cachedResults = this.cache.get(cacheKey);\r\n        if (cachedResults) {\r\n            return cachedResults as SearchResult<T>[];\r\n        }\r\n\r\n        try {\r\n            // Process query and perform search\r\n            const processedQuery = this.queryProcessor.process(query);\r\n            const results = await this.indexManager.search<T>(processedQuery, options);\r\n\r\n            // Cache results\r\n            this.cache.set(cacheKey, results);\r\n            return results;\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            throw new Error(`Search failed: ${errorMessage}`);\r\n        }\r\n    }\r\n\r\n    private async loadIndexes(): Promise<void> {\r\n        try {\r\n            const storedIndex = await this.storage.getIndex(this.config.name);\r\n            if (storedIndex) {\r\n                this.indexManager.importIndex(storedIndex);\r\n            }\r\n        } catch (error) {\r\n            console.warn('Failed to load stored index, starting fresh:', error);\r\n        }\r\n    }\r\n\r\n    private generateCacheKey(query: string, options: SearchOptions): string {\r\n        return `${this.config.name}-${query}-${JSON.stringify(options)}`;\r\n    }\r\n\r\n    async clearIndex(): Promise<void> {\r\n        try {\r\n            await this.storage.clearIndices();\r\n        } catch (error) {\r\n            console.warn('Failed to clear storage, continuing:', error);\r\n        }\r\n        this.indexManager.clear();\r\n        this.cache.clear();\r\n    }\r\n\r\n    async close(): Promise<void> {\r\n        try {\r\n            await this.storage.close();\r\n            this.cache.clear();\r\n            this.isInitialized = false;\r\n        } catch (error) {\r\n            console.warn('Error during close:', error);\r\n        }\r\n    }\r\n}","export class SearchError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'SearchError';\r\n  }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'IndexError';\r\n  }\r\n}\r\n\r\nexport class ValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n  }\r\n}\r\n\r\nexport class StorageError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'StorageError';\r\n  }\r\n}","// Import all types from a single barrel file\r\nimport type {\r\n    IndexConfig,\r\n    IndexOptions,\r\n    SearchContext,\r\n    SearchOptions,\r\n    SearchResult,\r\n    SearchStats,\r\n    SearchEventType,\r\n    SearchEvent,\r\n    DocumentLink,\r\n    DocumentRank,\r\n} from './types/index';\r\n\r\nexport { SearchContext,SearchStats, SearchEvent,SearchEventType,DocumentLink,DocumentRank}\r\n// Core imports\r\nimport { SearchEngine } from './core/SearchEngine';\r\nimport { IndexManager } from './core/IndexManager';\r\nimport { QueryProcessor } from './core/QueryProcessor';\r\n\r\n// Algorithm imports\r\nimport { TrieNode } from './algorithms/trie/TrieNode';\r\nimport { TrieSearch } from './algorithms/trie/TrieSearch';\r\n\r\n// Mapper imports\r\nimport { DataMapper } from './mappers/DataMapper';\r\nimport { IndexMapper } from './mappers/IndexMapper';\r\n\r\n// Storage imports\r\nimport { CacheManager } from './storage/CacheManager';\r\nimport { IndexedDB } from './storage/IndexedDBService';\r\n\r\n// Utility imports\r\nimport {\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n} from './utils/index';\r\n\r\n// Re-export all types\r\nexport * from './types/index';\r\n\r\n// Constants\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10\r\n};\r\n\r\n// Error classes\r\nexport class SearchError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SearchError';\r\n    }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'IndexError';\r\n    }\r\n}\r\n\r\n// Type guards\r\nexport function isSearchOptions(obj: unknown): obj is SearchOptions {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const options = obj as Partial<SearchOptions>;\r\n    \r\n    return (\r\n        (typeof options.fuzzy === 'undefined' || typeof options.fuzzy === 'boolean') &&\r\n        (typeof options.maxResults === 'undefined' || typeof options.maxResults === 'number')\r\n    );\r\n}\r\n\r\nexport function isIndexConfig(obj: unknown): obj is IndexConfig {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const config = obj as Partial<IndexConfig>;\r\n    \r\n    return Boolean(\r\n        typeof config.name === 'string' &&\r\n        typeof config.version === 'number' &&\r\n        Array.isArray(config.fields)\r\n    );\r\n}\r\n\r\nexport function isSearchResult<T>(obj: unknown): obj is SearchResult<T> {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const result = obj as Partial<SearchResult<T>>;\r\n    \r\n    return Boolean(\r\n        'item' in result &&\r\n        typeof result.score === 'number' &&\r\n        Array.isArray(result.matches)\r\n    );\r\n}\r\n\r\n// Export individual components\r\nexport {\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    DataMapper,\r\n    IndexMapper,\r\n    CacheManager,\r\n    IndexedDB,\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n};\r\n\r\n// Create consolidated export object\r\nexport const NexusSearch = {\r\n    DEFAULT_INDEX_OPTIONS,\r\n    DEFAULT_SEARCH_OPTIONS,\r\n    SearchError,\r\n    IndexError,\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    isSearchOptions,\r\n    isIndexConfig,\r\n    isSearchResult,\r\n} as const;\r\n\r\nexport default NexusSearch;","import { IndexOptions, SearchOptions, SearchDBSchema, IndexConfig, MetadataEntry } from \"@/types\";\r\nimport { IDBPDatabase, openDB } from \"idb\";\r\n\r\n\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n  caseSensitive: false,\r\n  stemming: true,\r\n  stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n  minWordLength: 2,\r\n  maxWordLength: 50,\r\n  fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n  fuzzy: false,\r\n  maxResults: 10,\r\n  threshold: 0.5,\r\n  fields: [],\r\n  sortBy: 'score',\r\n  sortOrder: 'desc',\r\n  page: 1,\r\n  pageSize: 10\r\n  \r\n};\r\n\r\nexport class IndexedDB {\r\n  private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n  private readonly DB_NAME = 'nexus_search_db';\r\n  private readonly DB_VERSION = 1;\r\n  private initPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    // Initialize immediately to catch early failures\r\n    this.initPromise = this.initialize();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.db) return;\r\n\r\n    try {\r\n      this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n        upgrade(db, oldVersion, newVersion, transaction) {\r\n          // Handle version upgrades\r\n          if (!db.objectStoreNames.contains('searchIndices')) {\r\n            const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n            indexStore.createIndex('timestamp', 'timestamp');\r\n          }\r\n\r\n          if (!db.objectStoreNames.contains('metadata')) {\r\n            const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n            metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n          }\r\n        },\r\n        blocked() {\r\n          console.warn('Database upgrade was blocked');\r\n        },\r\n        blocking() {\r\n          console.warn('Current database version is blocking a newer version');\r\n        },\r\n        terminated() {\r\n          console.error('Database connection was terminated');\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Storage initialization failed: ${message}`);\r\n    }\r\n  }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n\r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n\r\n      await this.db!.put('metadata', metadata); // No need to spread, directly use metadata\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async deleteIndex(key: string): Promise<void> {\r\n    await this.ensureConnection();\r\n\r\n    try {\r\n      await this.db!.delete('searchIndices', key);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to delete index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class SearchStorage {\r\n  private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n  private readonly DB_NAME = 'nexus_search_db';\r\n  private readonly DB_VERSION = 1;\r\n  private initPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    // Initialize immediately to catch early failures\r\n    this.initPromise = this.initialize();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.db) return;\r\n\r\n    try {\r\n      this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n        upgrade(db, oldVersion, newVersion, transaction) {\r\n          // Handle version upgrades\r\n          if (!db.objectStoreNames.contains('searchIndices')) {\r\n            const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n            indexStore.createIndex('timestamp', 'timestamp');\r\n          }\r\n\r\n          if (!db.objectStoreNames.contains('metadata')) {\r\n            const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n            metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n          }\r\n        },\r\n        blocked() {\r\n          console.warn('Database upgrade was blocked');\r\n        },\r\n        blocking() {\r\n          console.warn('Current database version is blocking a newer version');\r\n        },\r\n        terminated() {\r\n          console.error('Database connection was terminated');\r\n        }\r\n      });\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Storage initialization failed: ${message}`);\r\n    }\r\n  }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n    \r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n  \r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field directly\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n  \r\n      await this.db!.put('metadata', metadata); // Use metadata directly\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n  \r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n","import { MetricsResult, PerformanceMetric } from \"@/types\";\r\n\r\nexport class PerformanceMonitor {\r\n    private metrics: Map<string, number[]>;\r\n\r\n    constructor() {\r\n        this.metrics = new Map();\r\n    }\r\n\r\n    async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n        const start = performance.now();\r\n        try {\r\n            return await fn();\r\n        } finally {\r\n            const duration = performance.now() - start;\r\n            this.recordMetric(name, duration);\r\n        }\r\n    }\r\n\r\n    private recordMetric(name: string, duration: number): void {\r\n        if (!this.metrics.has(name)) {\r\n            this.metrics.set(name, []);\r\n        }\r\n        this.metrics.get(name)!.push(duration);\r\n    }\r\n\r\n    getMetrics(): MetricsResult {\r\n        const results: MetricsResult = {};\r\n\r\n        this.metrics.forEach((durations, name) => {\r\n            results[name] = {\r\n                avg: this.average(durations),\r\n                min: Math.min(...durations),\r\n                max: Math.max(...durations),\r\n                count: durations.length\r\n            } as PerformanceMetric;\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    private average(numbers: number[]): number {\r\n        return numbers.reduce((a, b) => a + b, 0) / numbers.length;\r\n    }\r\n\r\n    clear(): void {\r\n        this.metrics.clear();\r\n    }\r\n}"],"names":["CacheManager","constructor","maxSize","ttlMinutes","this","cache","Map","ttl","set","key","data","size","evictOldest","timestamp","Date","now","get","entry","isExpired","delete","oldestKey","oldestTime","Infinity","entries","clear","SearchStorage","options","type","db","memoryStorage","storageType","determineStorageType","isIndexedDBAvailable","indexedDB","_a","initialize","openDB","upgrade","createObjectStore","keyPath","createIndex","error","console","warn","storeIndex","name","put","id","getIndex","clearIndices","close","createSearchableFields","document","fields","searchableFields","forEach","field","value","getNestedValue","content","undefined","normalizeFieldValue","toLowerCase","trim","Array","isArray","map","v","join","Object","values","String","obj","path","keys","split","current","validateSearchOptions","maxResults","Error","threshold","DataMapper","dataMap","mapData","documentId","has","Set","add","getDocuments","getAllKeys","from","exportState","serializedMap","importState","state","TrieNode","children","isEndOfWord","documentRefs","weight","TrieSearch","root","documents","documentLinks","insert","text","words","filter","Boolean","word","char","search","query","results","found","collectDocumentRefs","fuzzySearch","maxDistance","fuzzySearchHelper","node","docId","child","currentWord","calculateLevenshteinDistance","childNode","newDistance","length","s1","s2","dp","fill","i","j","Math","min","trie","serializeNode","deserializeNode","serialized","childData","getSize","IndexMapper","dataMapper","trieSearch","indexDocument","tokenizeText","fuzzy","searchTerms","documentScores","term","score","matches","calculateScore","item","sort","a","b","slice","replace","IndexManager","config","indexMapper","addDocuments","index","doc","generateDocumentId","contentRecord","searchableDoc","metadata","_b","result","exportIndex","serializeDocument","indexState","importIndex","isValidIndexData","typedData","isValidIndexState","message","indexData","JSON","parse","stringify","QueryProcessor","STOP_WORDS","process","tokens","tokenize","processedTokens","processTokens","optimizeQuery","classifyToken","startsWith","includes","token","normalizeToken","endsWith","SearchEngine","isInitialized","indexManager","queryProcessor","storage","storageError","loadIndexes","errorMessage","cacheKey","generateCacheKey","cachedResults","processedQuery","storedIndex","clearIndex","ValidationError","super","StorageError","DEFAULT_INDEX_OPTIONS","caseSensitive","stemming","stopWords","minWordLength","maxWordLength","fuzzyThreshold","DEFAULT_SEARCH_OPTIONS","sortBy","sortOrder","page","pageSize","SearchError","IndexError","isSearchOptions","isIndexConfig","version","isSearchResult","NexusSearch","DB_NAME","DB_VERSION","initPromise","oldVersion","newVersion","transaction","objectStoreNames","contains","blocked","blocking","terminated","ensureConnection","updateMetadata","lastUpdated","getMetadata","deleteIndex","metrics","measure","fn","start","performance","duration","recordMetric","push","getMetrics","durations","avg","average","max","count","numbers","reduce","sorted","localeCompare","stats","originalSize","optimizedSize","compressionRatio","every"],"mappings":"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"}