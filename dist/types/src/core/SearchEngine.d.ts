import { IndexedDocument } from "@/storage";
import { SearchOptions, SearchResult, SearchEngineConfig, SearchEventListener } from "@/types";
export declare class SearchEngine {
    private readonly indexManager;
    private readonly queryProcessor;
    private storage;
    private readonly cache;
    private readonly config;
    private readonly eventListeners;
    private trie;
    private isInitialized;
    private documents;
    constructor(config: SearchEngineConfig);
    initialize(): Promise<void>;
    addDocuments(documents: IndexedDocument[]): Promise<void>;
    search(query: string, options?: SearchOptions): Promise<SearchResult<IndexedDocument>[]>;
    updateDocument(document: IndexedDocument): Promise<void>;
    removeDocument(documentId: string): Promise<void>;
    addEventListener(listener: SearchEventListener): void;
    removeEventListener(listener: SearchEventListener): void;
    private emitEvent;
    private loadIndexes;
    private generateCacheKey;
    private generateDocumentId;
    clearIndex(): Promise<void>;
    close(): Promise<void>;
    get isReady(): boolean;
    getAllDocuments(): IndexedDocument[];
    getDocumentById(id: string): IndexedDocument | undefined;
    getIndexedDocumentCount(): number;
    getTrieState(): unknown;
}
