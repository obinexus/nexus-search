{"version":3,"file":"index.umd.js","sources":["../src/storage/CacheManager.ts","../src/storage/SearchStorage.ts","../src/storage/IndexedDocument.ts","../src/mappers/DataMapper.ts","../src/algorithms/trie/TrieNode.ts","../src/algorithms/trie/TrieSearch.ts","../src/mappers/IndexMapper.ts","../src/utils/SearchUtils.ts","../src/utils/ValidationUtils.ts","../src/storage/IndexManager.ts","../src/core/QueryProcessor.ts","../src/core/SearchEngine.ts","../src/types/errors.ts","../src/types/cache.ts","../src/index.ts","../src/storage/IndexedDBService.ts","../src/utils/PerformanceUtils.ts"],"sourcesContent":["import { CacheEntry, CacheStrategy, SearchResult } from \"@/types\";\r\n\r\n\r\n\r\nexport class CacheManager {\r\n    private cache: Map<string, CacheEntry>;\r\n    private readonly maxSize: number;\r\n    private readonly ttl: number;\r\n    private strategy: CacheStrategy; // Changed from readonly to private\r\n    private accessOrder: string[];\r\n    private stats: {\r\n        hits: number;\r\n        misses: number;\r\n        evictions: number;\r\n    };\r\n\r\n    constructor(\r\n        maxSize: number = 1000, \r\n        ttlMinutes: number = 5, \r\n        initialStrategy: CacheStrategy = 'LRU'\r\n    ) {\r\n        this.cache = new Map();\r\n        this.maxSize = maxSize;\r\n        this.ttl = ttlMinutes * 60 * 1000;\r\n        this.strategy = initialStrategy;\r\n        this.accessOrder = [];\r\n        this.stats = {\r\n            hits: 0,\r\n            misses: 0,\r\n            evictions: 0\r\n        };\r\n    }\r\n\r\n    set(key: string, data: SearchResult<unknown>[]): void {\r\n        if (this.cache.size >= this.maxSize) {\r\n            this.evict();\r\n        }\r\n\r\n        const entry: CacheEntry = {\r\n            data,\r\n            timestamp: Date.now(),\r\n            lastAccessed: Date.now(),\r\n            accessCount: 1\r\n        };\r\n\r\n        this.cache.set(key, entry);\r\n        this.updateAccessOrder(key);\r\n    }\r\n\r\n    get(key: string): SearchResult<unknown>[] | null {\r\n        const entry = this.cache.get(key);\r\n\r\n        if (!entry) {\r\n            this.stats.misses++;\r\n            return null;\r\n        }\r\n\r\n        if (this.isExpired(entry.timestamp)) {\r\n            this.cache.delete(key);\r\n            this.removeFromAccessOrder(key);\r\n            this.stats.misses++;\r\n            return null;\r\n        }\r\n\r\n        entry.lastAccessed = Date.now();\r\n        entry.accessCount++;\r\n        this.updateAccessOrder(key);\r\n        this.stats.hits++;\r\n\r\n        return entry.data;\r\n    }\r\n\r\n    clear(): void {\r\n        this.cache.clear();\r\n        this.accessOrder = [];\r\n        this.stats = {\r\n            hits: 0,\r\n            misses: 0,\r\n            evictions: 0\r\n        };\r\n    }\r\n\r\n    getStats() {\r\n        return {\r\n            ...this.stats,\r\n            size: this.cache.size,\r\n            maxSize: this.maxSize,\r\n            hitRate: this.stats.hits / (this.stats.hits + this.stats.misses),\r\n            strategy: this.strategy\r\n        };\r\n    }\r\n\r\n    private isExpired(timestamp: number): boolean {\r\n        return Date.now() - timestamp > this.ttl;\r\n    }\r\n\r\n    private evict(): void {\r\n        const keyToEvict = this.strategy === 'LRU' \r\n            ? this.findLRUKey()\r\n            : this.findMRUKey();\r\n\r\n        if (keyToEvict) {\r\n            this.cache.delete(keyToEvict);\r\n            this.removeFromAccessOrder(keyToEvict);\r\n            this.stats.evictions++;\r\n        }\r\n    }\r\n\r\n    private findLRUKey(): string | null {\r\n        return this.accessOrder[0] || null;\r\n    }\r\n\r\n    private findMRUKey(): string | null {\r\n        return this.accessOrder[this.accessOrder.length - 1] || null;\r\n    }\r\n\r\n    private updateAccessOrder(key: string): void {\r\n        this.removeFromAccessOrder(key);\r\n\r\n        if (this.strategy === 'LRU') {\r\n            this.accessOrder.push(key); // Most recently used at end\r\n        } else {\r\n            this.accessOrder.unshift(key); // Most recently used at start\r\n        }\r\n    }\r\n\r\n    private removeFromAccessOrder(key: string): void {\r\n        const index = this.accessOrder.indexOf(key);\r\n        if (index !== -1) {\r\n            this.accessOrder.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    setStrategy(newStrategy: CacheStrategy): void {\r\n        if (newStrategy === this.strategy) return;\r\n        \r\n        this.strategy = newStrategy;\r\n        const entries = [...this.accessOrder];\r\n        this.accessOrder = [];\r\n        entries.forEach(key => this.updateAccessOrder(key));\r\n    }\r\n\r\n    prune(): number {\r\n        let prunedCount = 0;\r\n        for (const [key, entry] of this.cache.entries()) {\r\n            if (this.isExpired(entry.timestamp)) {\r\n                this.cache.delete(key);\r\n                this.removeFromAccessOrder(key);\r\n                prunedCount++;\r\n            }\r\n        }\r\n        return prunedCount;\r\n    }\r\n\r\n    analyze(): {\r\n        hitRate: number;\r\n        averageAccessCount: number;\r\n        mostAccessedKeys: Array<{ key: string; count: number }>;\r\n    } {\r\n        const totalAccesses = this.stats.hits + this.stats.misses;\r\n        const hitRate = totalAccesses > 0 ? this.stats.hits / totalAccesses : 0;\r\n\r\n        let totalAccessCount = 0;\r\n        const accessCounts = new Map<string, number>();\r\n\r\n        for (const [key, entry] of this.cache.entries()) {\r\n            totalAccessCount += entry.accessCount;\r\n            accessCounts.set(key, entry.accessCount);\r\n        }\r\n\r\n        const averageAccessCount = this.cache.size > 0 \r\n            ? totalAccessCount / this.cache.size \r\n            : 0;\r\n\r\n        const mostAccessedKeys = Array.from(accessCounts.entries())\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, 5)\r\n            .map(([key, count]) => ({ key, count }));\r\n\r\n        return {\r\n            hitRate,\r\n            averageAccessCount,\r\n            mostAccessedKeys\r\n        };\r\n    }\r\n}","import { openDB, IDBPDatabase } from 'idb';\nimport type { SearchDBSchema, StorageOptions } from '@/types';\n\nexport class SearchStorage {\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\n    private memoryStorage: Map<string, unknown> = new Map();\n    private storageType: 'indexeddb' | 'memory';\n    \n    constructor(options: StorageOptions = {\n        type: 'memory'\n    }) {\n        this.storageType = this.determineStorageType(options);\n    }\n\n    private determineStorageType(options: StorageOptions): 'indexeddb' | 'memory' {\n        // Use memory storage if explicitly specified or if in Node.js environment\n        if (options.type === 'memory' || !this.isIndexedDBAvailable()) {\n            return 'memory';\n        }\n        return 'indexeddb';\n    }\n\n    private isIndexedDBAvailable(): boolean {\n        try {\n            return typeof indexedDB !== 'undefined' && indexedDB !== null;\n        } catch {\n            return false;\n        }\n    }\n\n    async initialize(): Promise<void> {\n        if (this.storageType === 'memory') {\n            // No initialization needed for memory storage\n            return;\n        }\n\n        try {\n            this.db = await openDB<SearchDBSchema>('nexus-search-db', 1, {\n                upgrade(db) {\n                    const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\n                    indexStore.createIndex('timestamp', 'timestamp');\n\n                    const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\n                    metaStore.createIndex('lastUpdated', 'lastUpdated');\n                }\n            });\n        } catch (error) {\n            // Fallback to memory storage if IndexedDB fails\n            this.storageType = 'memory';\n            console.warn('Failed to initialize IndexedDB, falling back to memory storage:', error);\n        }\n    }\n\n    async storeIndex(name: string, data: unknown): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.set(name, data);\n            return;\n        }\n\n        try {\n            await this.db?.put('searchIndices', {\n                id: name,\n                data,\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.error('Storage error:', error);\n            // Fallback to memory storage\n            this.memoryStorage.set(name, data);\n        }\n    }\n\n    async getIndex(name: string): Promise<unknown> {\n        if (this.storageType === 'memory') {\n            return this.memoryStorage.get(name);\n        }\n\n        try {\n            const entry = await this.db?.get('searchIndices', name);\n            return entry?.data;\n        } catch (error) {\n            console.error('Retrieval error:', error);\n            // Fallback to memory storage\n            return this.memoryStorage.get(name);\n        }\n    }\n\n    async clearIndices(): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.clear();\n            return;\n        }\n\n        try {\n            await this.db?.clear('searchIndices');\n        } catch (error) {\n            console.error('Clear error:', error);\n            this.memoryStorage.clear();\n        }\n    }\n\n    async close(): Promise<void> {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n        this.memoryStorage.clear();\n    }\n}","import { IndexedDocument as IIndexedDocument, DocumentMetadata } from \"@/types\";\r\n\r\nexport class IndexedDocument implements IIndexedDocument {\r\n    id: string;\r\n    fields: {\r\n        title: string;\r\n        content: string;\r\n        author: string;\r\n        tags: string[];\r\n    };\r\n    metadata?: DocumentMetadata;\r\n\r\n    constructor(id: string, fields: { title: string; content: string; author: string; tags: string[] }, metadata?: DocumentMetadata) {\r\n        this.id = id;\r\n        this.fields = fields;\r\n        this.metadata = metadata;\r\n    }\r\n\r\n    static fromObject(obj: IIndexedDocument): IndexedDocument {\r\n        return new IndexedDocument(obj.id, obj.fields, obj.metadata);\r\n    }\r\n\r\n    toObject(): IIndexedDocument {\r\n        return {\r\n            id: this.id,\r\n            fields: this.fields,\r\n            metadata: this.metadata,\r\n            toObject: this.toObject.bind(this)\r\n        };\r\n    }\r\n}","export class DataMapper {\r\n  private dataMap: Map<string, Set<string>>;\r\n\r\n  constructor() {\r\n    this.dataMap = new Map();\r\n  }\r\n\r\n  mapData(key: string, documentId: string): void {\r\n    if (!this.dataMap.has(key)) {\r\n      this.dataMap.set(key, new Set());\r\n    }\r\n    this.dataMap.get(key)!.add(documentId);\r\n  }\r\n\r\n  getDocuments(key: string): Set<string> {\r\n    return this.dataMap.get(key) || new Set();\r\n  }\r\n\r\n  getAllKeys(): string[] {\r\n    return Array.from(this.dataMap.keys());\r\n  }\r\n\r\n  removeDocument(documentId: string): void {\r\n    this.dataMap.forEach(value => {\r\n      value.delete(documentId);\r\n    });\r\n  }\r\n\r\n  removeKey(key: string): void {\r\n    this.dataMap.delete(key);\r\n  }\r\n  \r\n  exportState(): Record<string, string[]> {\r\n    const serializedMap: Record<string, string[]> = {};\r\n    \r\n    this.dataMap.forEach((value, key) => {\r\n      serializedMap[key] = Array.from(value);\r\n    });\r\n\r\n    return serializedMap;\r\n  }\r\n\r\n  importState(state: Record<string, string[]>): void {\r\n    this.dataMap.clear();\r\n    \r\n    Object.entries(state).forEach(([key, value]) => {\r\n      this.dataMap.set(key, new Set(value));\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.dataMap.clear();\r\n  }\r\n}","export class TrieNode {\r\n  children: Map<string, TrieNode>;\r\n  isEndOfWord: boolean;\r\n  documentRefs: Set<string>;\r\n  weight: number;\r\n\r\n  constructor() {\r\n      this.children = new Map();\r\n      this.isEndOfWord = false;\r\n      this.documentRefs = new Set();\r\n      this.weight = 0.0;\r\n  }\r\n}\r\n","import {  IndexableDocument, DocumentLink, SerializedState, SerializedTrieNode } from \"@/types\";\r\nimport { TrieNode } from \"./TrieNode\";\r\n\r\nexport class TrieSearch {\r\n    private root: TrieNode;\r\n    private documents: Map<string, IndexableDocument>;\r\n    private documentLinks: Map<string, DocumentLink[]>;\r\n\r\n    constructor() {\r\n        this.root = new TrieNode();\r\n        this.documents = new Map();\r\n        this.documentLinks = new Map();\r\n    }\r\n\r\n    public insert(text: string, documentId: string): void {\r\n        if (!text || !documentId) return;\r\n\r\n        const words = text.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            let current = this.root;\r\n\r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    current.children.set(char, new TrieNode());\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n\r\n            current.isEndOfWord = true;\r\n            current.documentRefs.add(documentId);\r\n            current.weight += 1.0;\r\n        }\r\n    }\r\n\r\n    public search(query: string, maxResults: number = 10): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            let current = this.root;\r\n            let found = true;\r\n\r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    found = false;\r\n                    break;\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n\r\n            if (found && current.isEndOfWord) {\r\n                this.collectDocumentRefs(current, results, maxResults);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public remove(documentId: string): void {\r\n        for (const [, node] of this.root.children) {\r\n            this.removeHelper(documentId, node);\r\n        }\r\n\r\n        this.documents.delete(documentId);\r\n        this.documentLinks.delete(documentId);\r\n    }\r\n\r\n    private removeHelper(documentId: string, node: TrieNode): void {\r\n        if (node.documentRefs.has(documentId)) {\r\n            node.documentRefs.delete(documentId);\r\n            node.weight -= 1.0;\r\n        }\r\n\r\n        for (const [, child] of node.children) {\r\n            this.removeHelper(documentId, child);\r\n        }\r\n\r\n        if (node.children.size === 0 && node.documentRefs.size === 0 && node.weight === 0) {\r\n            node.children.clear();\r\n        }\r\n    }\r\n\r\n    public linkDocument(documentId: string, links: DocumentLink[]): void {\r\n        this.documentLinks.set(documentId, links);\r\n    }\r\n\r\n    public getDocumentLinks(documentId: string): DocumentLink[] {\r\n        return this.documentLinks.get(documentId) ?? [];\r\n    }   \r\n    public removeData(documentId: string): void {\r\n        this.remove(documentId);\r\n    }\r\n\r\n    public fuzzySearch(query: string, maxDistance: number = 2): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            this.fuzzySearchHelper(word, this.root, '', maxDistance, results);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private collectDocumentRefs(node: TrieNode, results: Set<string>, maxResults: number): void {\r\n        if (node.isEndOfWord) {\r\n            for (const docId of node.documentRefs) {\r\n                if (results.size >= maxResults) return;\r\n                results.add(docId);\r\n            }\r\n        }\r\n\r\n        for (const child of node.children.values()) {\r\n            if (results.size >= maxResults) return;\r\n            this.collectDocumentRefs(child, results, maxResults);\r\n        }\r\n    }\r\n\r\n    private fuzzySearchHelper(\r\n        word: string,\r\n        node: TrieNode,\r\n        currentWord: string,\r\n        maxDistance: number,\r\n        results: Set<string>\r\n    ): void {\r\n        if (maxDistance < 0) return;\r\n\r\n        if (node.isEndOfWord) {\r\n            const distance = this.calculateLevenshteinDistance(word, currentWord);\r\n            if (distance <= maxDistance) {\r\n                node.documentRefs.forEach(id => results.add(id));\r\n            }\r\n        }\r\n\r\n        for (const [char, childNode] of node.children) {\r\n            const newDistance = word[currentWord.length] !== char ? maxDistance - 1 : maxDistance;\r\n            this.fuzzySearchHelper(word, childNode, currentWord + char, newDistance, results);\r\n\r\n            if (maxDistance > 0) {\r\n                this.fuzzySearchHelper(word, childNode, currentWord, maxDistance - 1, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    private calculateLevenshteinDistance(s1: string, s2: string): number {\r\n        const dp: number[][] = Array(s1.length + 1).fill(0)\r\n            .map(() => Array(s2.length + 1).fill(0));\r\n\r\n        for (let i = 0; i <= s1.length; i++) dp[i][0] = i;\r\n        for (let j = 0; j <= s2.length; j++) dp[0][j] = j;\r\n\r\n        for (let i = 1; i <= s1.length; i++) {\r\n            for (let j = 1; j <= s2.length; j++) {\r\n                dp[i][j] = Math.min(\r\n                    dp[i - 1][j] + 1,\r\n                    dp[i][j - 1] + 1,\r\n                    dp[i - 1][j - 1] + (s1[i - 1] !== s2[j - 1] ? 1 : 0)\r\n                );\r\n            }\r\n        }\r\n\r\n        return dp[s1.length][s2.length];\r\n    }\r\n\r\n    public exportState(): SerializedState {\r\n        return {\r\n            trie: this.serializeNode(this.root),\r\n            documents: Array.from(this.documents.entries()),\r\n            documentLinks: Array.from(this.documentLinks.entries())\r\n        };\r\n    }\r\n\r\n    public importState(state: SerializedState): void {\r\n        this.root = this.deserializeNode(state.trie);\r\n        this.documents = new Map(state.documents);\r\n        this.documentLinks = new Map(state.documentLinks);\r\n    }\r\n\r\n    private serializeNode(node: TrieNode): SerializedTrieNode {\r\n        const children: { [key: string]: SerializedTrieNode } = {};\r\n\r\n        node.children.forEach((childNode, char) => {\r\n            children[char] = this.serializeNode(childNode);\r\n        });\r\n\r\n        return {\r\n            isEndOfWord: node.isEndOfWord,\r\n            documentRefs: Array.from(node.documentRefs),\r\n            weight: node.weight,\r\n            children\r\n        };\r\n    }\r\n\r\n    private deserializeNode(serialized: SerializedTrieNode): TrieNode {\r\n        const node = new TrieNode();\r\n        node.isEndOfWord = serialized.isEndOfWord;\r\n        node.documentRefs = new Set(serialized.documentRefs);\r\n        node.weight = serialized.weight ?? 0;\r\n\r\n        Object.entries(serialized.children).forEach(([char, childData]) => {\r\n            node.children.set(char, this.deserializeNode(childData));\r\n        });\r\n\r\n        return node;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.root = new TrieNode();\r\n        this.documents.clear();\r\n        this.documentLinks.clear();\r\n    }\r\n\r\n    public getSize(): number {\r\n        return this.documents.size;\r\n    }\r\n}","import { TrieSearch } from \"@/algorithms/trie\";\r\nimport {  SearchableDocument, SearchResult, SerializedState } from \"@/types\";\r\nimport { DataMapper } from \"./DataMapper\";\r\n\r\n\r\n/**\r\n * IndexMapper class\r\n * @description IndexMapper class that indexes documents and performs search operations\r\n * @class IndexMapper\r\n * @implements {IndexMapper}\r\n * @method indexDocument\r\n * @method search\r\n * \r\n */\r\nexport class IndexMapper {\r\n  private dataMapper: DataMapper;\r\n  private trieSearch: TrieSearch;\r\n\r\n  constructor() {\r\n    this.dataMapper = new DataMapper();\r\n    this.trieSearch = new TrieSearch();\r\n  }\r\n\r\n  indexDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    fields.forEach(field => {\r\n        const value = document[field];\r\n        if (typeof value === 'string') {\r\n            const words = this.tokenizeText(value);\r\n            words.forEach(word => {\r\n                this.trieSearch.insert(word, id);\r\n                this.dataMapper.mapData(word.toLowerCase(), id);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n  search(query: string, options: { fuzzy?: boolean; maxResults?: number } = {}): SearchResult<string>[] {\r\n    const { fuzzy = false, maxResults = 10 } = options;\r\n    const searchTerms = this.tokenizeText(query);\r\n    \r\n    const documentScores = new Map<string, { score: number; matches: Set<string> }>();\r\n\r\n    searchTerms.forEach(term => {\r\n      const documentIds = fuzzy\r\n        ? this.trieSearch.fuzzySearch(term)\r\n        : this.trieSearch.search(term, maxResults);\r\n\r\n      documentIds.forEach(id => {\r\n        const current = documentScores.get(id) || { score: 0, matches: new Set<string>() };\r\n        current.score += this.calculateScore(id, term);\r\n        current.matches.add(term);\r\n        documentScores.set(id, current);\r\n      });\r\n    });\r\n\r\n    const results = Array.from(documentScores.entries())\r\n      .map(([id, { score, matches }]) => ({\r\n        id: id,\r\n        document: id,\r\n        item: id,\r\n        score: score / searchTerms.length,\r\n        matches: Array.from(matches)\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    return results.slice(0, maxResults);\r\n  }\r\n\r\n  exportState(): unknown {\r\n    return {\r\n      trie: this.trieSearch.exportState(),\r\n      dataMap: this.dataMapper.exportState()\r\n    };\r\n  }\r\n\r\n  importState(state: { trie: SerializedState; dataMap: Record<string, string[]> }): void {\r\n    if (!state || !state.trie || !state.dataMap) {\r\n        throw new Error('Invalid index state');\r\n    }\r\n\r\n    this.trieSearch = new TrieSearch();\r\n    this.trieSearch.importState(state.trie );\r\n    this.dataMapper = new DataMapper();\r\n    this.dataMapper.importState(state.dataMap);\r\n}\r\n\r\n\r\n  private tokenizeText(text: string): string[] {\r\n    return text\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0);\r\n  }\r\n\r\n\r\n  private calculateScore(documentId: string, term: string): number {\r\n    const baseScore = this.dataMapper.getDocuments(term.toLowerCase()).has(documentId) ? 1.0 : 0.5;\r\n    return baseScore\r\n  \r\n  }\r\n  removeDocument(id: string): void {\r\n    this.trieSearch.remove(id);\r\n    this.dataMapper.removeDocument(id);\r\n  }\r\n\r\n\r\n  \r\n  addDocument(id: string, fields: string[], document: SearchableDocument): void {\r\n    this.indexDocument(document, id, fields);\r\n  }\r\n\r\n  updateDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    this.removeDocument(id);\r\n    this.indexDocument(document, id, fields);\r\n  }\r\n\r\n  clear(): void {\r\n    this.trieSearch = new TrieSearch();\r\n    this.dataMapper = new DataMapper();\r\n  }\r\n}\r\n","import { DocumentValue, IndexableDocument, OptimizationResult } from \"@/types\";\r\n\r\ntype DocumentContent = {\r\n    [key: string]: DocumentValue | DocumentContent;\r\n};\r\n\r\nexport function createSearchableFields<T extends IndexableDocument>(\r\n    document: T,\r\n    fields: string[]\r\n): Record<string, string> {\r\n    const searchableFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        if (value !== undefined) {\r\n            searchableFields[field] = normalizeFieldValue(value);\r\n        }\r\n    });\r\n    return searchableFields;\r\n}\r\n\r\nexport function normalizeFieldValue(value: DocumentValue): string {\r\n    if (typeof value === 'string') {\r\n        return value.toLowerCase().trim();\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n        return Object.values(value).map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    return String(value);\r\n}\r\n\r\nexport function getNestedValue(obj: DocumentContent, path: string): DocumentValue | undefined {\r\n    const keys = path.split('.');\r\n    let current: DocumentValue | DocumentContent = obj;\r\n\r\n    for (const key of keys) {\r\n        if (current && typeof current === 'object' && !Array.isArray(current) && key in current) {\r\n            current = current[key];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return current as DocumentValue;\r\n}\r\n\r\n/**\r\n * Optimizes an array of indexable documents by removing duplicates and sorting them.\r\n *\r\n * @template T - The type of the indexable document.\r\n * @param {T[]} data - The array of indexable documents to be optimized.\r\n * @returns {OptimizationResult<T>} An object containing the optimized data and statistics about the optimization process.\r\n *\r\n * @typedef {Object} OptimizationResult\r\n * @property {T[]} data - The optimized array of indexable documents.\r\n * @property {Object} stats - Statistics about the optimization process.\r\n * @property {number} stats.originalSize - The original size of the data array.\r\n * @property {number} stats.optimizedSize - The size of the optimized data array.\r\n * @property {number} stats.compressionRatio - The ratio of the optimized size to the original size.\r\n */\r\nexport function optimizeIndex<T extends IndexableDocument>(data: T[]): OptimizationResult<T> {\r\n    const uniqueData = Array.from(new Set(data.map(item =>\r\n        JSON.stringify(item)\r\n    ))).map(item => JSON.parse(item)) as T[];\r\n\r\n    const sorted = uniqueData.sort((a, b) =>\r\n        JSON.stringify(a).localeCompare(JSON.stringify(b))\r\n    );\r\n\r\n    return {\r\n        data: sorted,\r\n        stats: {\r\n            originalSize: data.length,\r\n            optimizedSize: sorted.length,\r\n            compressionRatio: sorted.length / data.length\r\n        }\r\n    };\r\n}","import { SearchOptions, IndexConfig, SearchableDocument } from \"@/types\";\r\nimport { getNestedValue } from \"./SearchUtils\";\r\n\r\nexport function validateSearchOptions(options: SearchOptions): void {\r\n    if (options.maxResults && options.maxResults < 1) {\r\n        throw new Error('maxResults must be greater than 0');\r\n    }\r\n    if (options.threshold && (options.threshold < 0 || options.threshold > 1)) {\r\n        throw new Error('threshold must be between 0 and 1');\r\n    }\r\n    if (options.fields && !Array.isArray(options.fields)) {\r\n        throw new Error('fields must be an array');\r\n    }\r\n}\r\n\r\nexport function validateIndexConfig(config: IndexConfig): void {\r\n    if (!config.name) {\r\n        throw new Error('Index name is required');\r\n    }\r\n    if (!config.version || typeof config.version !== 'number') {\r\n        throw new Error('Valid version number is required');\r\n    }\r\n    if (!Array.isArray(config.fields) || config.fields.length === 0) {\r\n        throw new Error('At least one field must be specified for indexing');\r\n    }\r\n}\r\n\r\nexport function validateDocument(document: SearchableDocument, fields: string[]): boolean {\r\n    return fields.every(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        return value !== undefined;\r\n    });\r\n}","import { IndexMapper } from \"@/mappers\";\r\nimport { \r\n    IndexConfig, \r\n    SearchOptions, \r\n    SearchResult, \r\n    IndexedDocument, \r\n    SearchableDocument, \r\n    SerializedState,\r\n    DocumentValue \r\n} from \"@/types\";\r\nimport { SerializedIndex } from \"@/types/core\";\r\nimport { createSearchableFields } from \"@/utils\";\r\n\r\nexport class IndexManager {\r\n    getAllDocuments() {\r\n        return this.documents;\r\n        \r\n    }\r\n    private indexMapper: IndexMapper;\r\n    private config: IndexConfig;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: IndexConfig) {\r\n        this.config = config;\r\n        this.indexMapper = new IndexMapper();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        for (const [index, doc] of documents.entries()) {\r\n            const id = this.generateDocumentId(index);\r\n\r\n            // Convert document fields to Record<string, DocumentValue>\r\n            const contentRecord: Record<string, DocumentValue> = {};\r\n            for (const field of this.config.fields) {\r\n                if (field in doc) {\r\n                    if (field in doc) {\r\n                        contentRecord[field] = (doc as any)[field] as DocumentValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Create searchable document with proper field extraction\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: contentRecord,\r\n                    id\r\n                }, this.config.fields),\r\n                metadata: doc.metadata\r\n            };\r\n\r\n            // Store original document with ID\r\n            this.documents.set(id, { ...doc, id });\r\n\r\n            // Index the document\r\n            try {\r\n                await this.indexMapper.indexDocument(searchableDoc, id, this.config.fields);\r\n            } catch (error) {\r\n                console.warn(`Failed to index document ${id}:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(\r\n        query: string, \r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<T>[]> {\r\n        if (!query.trim()) return [];\r\n\r\n        try {\r\n            const searchResults = await this.indexMapper.search(query, {\r\n                fuzzy: options.fuzzy ?? false,\r\n                maxResults: options.maxResults ?? 10\r\n            });\r\n\r\n            return searchResults\r\n                .filter(result => this.documents.has(result.item))\r\n                .map(result => {\r\n                    const item = this.documents.get(result.item) as T;\r\n                    return {\r\n                        id: item.id,\r\n                        document: item,\r\n                        metadata: item.metadata,\r\n                        item,\r\n                        score: result.score,\r\n                        matches: result.matches\r\n                    };\r\n                })\r\n                .filter(result => result.score >= (options.threshold ?? 0.5));\r\n\r\n        } catch (error) {\r\n            console.error('Search error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    exportIndex(): SerializedIndex {\r\n        return {\r\n            documents: Array.from(this.documents.entries()).map(([key, value]) => ({\r\n                key,\r\n                value: this.serializeDocument(value)\r\n            })),\r\n            indexState: this.indexMapper.exportState(),\r\n            config: this.config\r\n        };\r\n    }\r\n\r\n    importIndex(data: unknown): void {\r\n        if (!this.isValidIndexData(data)) {\r\n            throw new Error('Invalid index data format');\r\n        }\r\n\r\n        try {\r\n            const typedData = data as SerializedIndex;\r\n            this.documents = new Map(\r\n                typedData.documents.map(item => [item.key, item.value])\r\n            );\r\n            this.config = typedData.config;\r\n            this.indexMapper = new IndexMapper();\r\n            \r\n            if (this.isValidIndexState(typedData.indexState)) {\r\n                this.indexMapper.importState({\r\n                    trie: typedData.indexState.trie,\r\n                    dataMap: typedData.indexState.dataMap\r\n                });\r\n            } else {\r\n                throw new Error('Invalid index state format');\r\n            }\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to import index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async removeDocument(documentId: string): Promise<void> {\r\n        if (this.documents.has(documentId)) {\r\n            this.documents.delete(documentId);\r\n            await this.indexMapper.removeDocument(documentId);\r\n        }\r\n    }\r\n\r\n    async updateDocument<T extends IndexedDocument>(document: T): Promise<void> {\r\n        const id = document.id;\r\n        if (this.documents.has(id)) {\r\n            this.documents.set(id, document);\r\n            const contentRecord: Record<string, DocumentValue> = {};\r\n            for (const field of this.config.fields) {\r\n                if (field in document) {\r\n                    if (field in document) {\r\n                        contentRecord[field] = (document as any)[field] as DocumentValue;\r\n                    }\r\n                }\r\n            }\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: contentRecord,\r\n                    id\r\n                }, this.config.fields),\r\n                metadata: document.metadata\r\n            };\r\n            await this.indexMapper.updateDocument(searchableDoc, id, this.config.fields);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.documents.clear();\r\n        this.indexMapper = new IndexMapper();\r\n    }\r\n\r\n    private generateDocumentId(index: number): string {\r\n        return `${this.config.name}-${index}-${Date.now()}`;\r\n    }\r\n\r\n    private isValidIndexData(data: unknown): data is SerializedIndex {\r\n        if (!data || typeof data !== 'object') return false;\r\n        \r\n        const indexData = data as Partial<SerializedIndex>;\r\n        return Boolean(\r\n            indexData.documents &&\r\n            Array.isArray(indexData.documents) &&\r\n            indexData.indexState !== undefined &&\r\n            indexData.config &&\r\n            typeof indexData.config === 'object'\r\n        );\r\n    }\r\n\r\n    private isValidIndexState(state: unknown): state is { trie: SerializedState; dataMap: Record<string, string[]> } {\r\n        return (\r\n            state !== null &&\r\n            typeof state === 'object' &&\r\n            'trie' in state &&\r\n            'dataMap' in state\r\n        );\r\n    }\r\n\r\n    private serializeDocument(doc: IndexedDocument): IndexedDocument {\r\n        return JSON.parse(JSON.stringify(doc));\r\n    }\r\n}","import { QueryToken } from \"@/types\";\r\n\r\n\r\nexport class QueryProcessor {\r\n  private readonly STOP_WORDS = new Set([\r\n    'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for',\r\n    'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on',\r\n    'that', 'the', 'to', 'was', 'were', 'will', 'with'\r\n  ]);\r\n\r\n  process(query: string): string {\r\n    const tokens = this.tokenize(query);\r\n    const processedTokens = this.processTokens(tokens);\r\n    return this.optimizeQuery(processedTokens);\r\n  }\r\n\r\n  private tokenize(query: string): QueryToken[] {\r\n    return query\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(term => term.length > 0)\r\n      .map(term => this.classifyToken(term));\r\n  }\r\n\r\n  private classifyToken(term: string): QueryToken {\r\n    if (term.startsWith('+') || term.startsWith('-')) {\r\n      return { type: 'operator', value: term };\r\n    }\r\n    if (term.includes(':')) {\r\n      return { type: 'modifier', value: term };\r\n    }\r\n    return { type: 'term', value: term };\r\n  }\r\n\r\n  private processTokens(tokens: QueryToken[]): QueryToken[] {\r\n    return tokens\r\n      .filter(token => \r\n        token.type !== 'term' || !this.STOP_WORDS.has(token.value)\r\n      )\r\n      .map(token => this.normalizeToken(token));\r\n  }\r\n\r\n  private normalizeToken(token: QueryToken): QueryToken {\r\n    if (token.type === 'term') {\r\n      // Basic stemming (could be enhanced with proper stemming algorithm)\r\n      let value = token.value;\r\n      if (value.endsWith('ing')) value = value.slice(0, -3);\r\n      if (value.endsWith('s')) value = value.slice(0, -1);\r\n      return { ...token, value };\r\n    }\r\n    return token;\r\n  }\r\n\r\n  private optimizeQuery(tokens: QueryToken[]): string {\r\n    return tokens\r\n      .map(token => token.value)\r\n      .join(' ');\r\n  }\r\n}","import { CacheManager, IndexedDocument, SearchStorage } from \"@/storage\";\r\nimport { \r\n    SearchOptions, \r\n    SearchResult, \r\n    SearchEngineConfig,\r\n    SearchEventListener,\r\n    SearchEvent,\r\n} from \"@/types\";\r\nimport { validateSearchOptions, createSearchableFields } from \"@/utils\";\r\nimport { IndexManager } from \"../storage/IndexManager\";\r\nimport { QueryProcessor } from \"./QueryProcessor\";\r\nimport { TrieSearch } from \"@/algorithms/trie\";\r\n\r\nexport class SearchEngine {\r\n    private readonly indexManager: IndexManager;\r\n    private readonly queryProcessor: QueryProcessor;\r\n    private storage: SearchStorage;\r\n    private readonly cache: CacheManager;\r\n    private readonly config: SearchEngineConfig;\r\n    private readonly eventListeners: Set<SearchEventListener>;\r\n    private trie: TrieSearch;\r\n    private isInitialized: boolean = false;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: SearchEngineConfig) {\r\n        this.config = config;\r\n        this.indexManager = new IndexManager(config);\r\n        this.queryProcessor = new QueryProcessor();\r\n        this.storage = new SearchStorage(config.storage);\r\n        this.cache = new CacheManager();\r\n        this.eventListeners = new Set();\r\n        this.trie = new TrieSearch();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    public async initialize(): Promise<void> {\r\n        if (this.isInitialized) return;\r\n\r\n        try {\r\n            try {\r\n                await this.storage.initialize();\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n                \r\n                this.storage = new SearchStorage({ type: 'memory' });\r\n                await this.storage.initialize();\r\n            }\r\n\r\n            await this.loadIndexes();\r\n            this.isInitialized = true;\r\n\r\n            this.emitEvent({\r\n                type: 'engine:initialized',\r\n                timestamp: Date.now()\r\n            });\r\n        } catch (error) {\r\n            throw new Error(`Failed to initialize search engine: ${String(error)}`);\r\n        }\r\n    }\r\n\r\n    public async addDocuments(documents: IndexedDocument[]): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        try {\r\n            this.emitEvent({\r\n                type: 'index:start',\r\n                timestamp: Date.now(),\r\n                data: { documentCount: documents.length }\r\n            });\r\n\r\n            for (const doc of documents) {\r\n                const docId = doc.id || this.generateDocumentId();\r\n                const indexedDoc = IndexedDocument.fromObject({\r\n                    ...doc,\r\n                    id: docId,\r\n                    metadata: {\r\n                        ...doc.metadata,\r\n                        indexed: Date.now(),\r\n                        lastModified: Date.now()\r\n                    },\r\n                    toObject: function (): IndexedDocument {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    }\r\n                });\r\n\r\n                this.documents.set(docId, indexedDoc);\r\n\r\n                const searchableContent = createSearchableFields(\r\n                    { content: doc.fields, id: docId },\r\n                    this.config.fields\r\n                );\r\n\r\n                for (const field of this.config.fields) {\r\n                    if (searchableContent[field]) {\r\n                        const words = searchableContent[field]\r\n                            .toLowerCase()\r\n                            .split(/\\s+/)\r\n                            .filter(Boolean);\r\n\r\n                        for (const word of words) {\r\n                            this.trie.insert(word, docId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            await this.indexManager.addDocuments(\r\n                Array.from(this.documents.values()).map(doc => doc.toObject())\r\n            );\r\n\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n            }\r\n\r\n            this.cache.clear();\r\n            this.emitEvent({\r\n                type: 'index:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentCount: documents.length }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'index:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to add documents: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async search(\r\n        query: string,\r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<IndexedDocument>[]> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        validateSearchOptions(options);\r\n\r\n        const searchStartTime = Date.now();\r\n        this.emitEvent({\r\n            type: 'search:start',\r\n            timestamp: searchStartTime,\r\n            data: { query, options }\r\n        });\r\n\r\n        const cacheKey = this.generateCacheKey(query, options);\r\n        const cachedResults = this.cache.get(cacheKey);\r\n        if (cachedResults) {\r\n            return cachedResults as SearchResult<IndexedDocument>[];\r\n        }\r\n\r\n        try {\r\n            const processedQuery = this.queryProcessor.process(query);\r\n            const results = await this.indexManager.search<IndexedDocument>(processedQuery, options);\r\n\r\n            // Enhance results with metadata\r\n            const enhancedResults = results.map(result => ({\r\n                ...result,\r\n                document: this.documents.get(result.id as unknown as string)?.toObject() || result.document,\r\n                metadata: {\r\n                    ...result.metadata,\r\n                    lastAccessed: Date.now()\r\n                }\r\n            }));\r\n\r\n            this.cache.set(cacheKey, enhancedResults);\r\n\r\n            this.emitEvent({\r\n                type: 'search:complete',\r\n                timestamp: Date.now(),\r\n                data: {\r\n                    query,\r\n                    options,\r\n                    resultCount: enhancedResults.length,\r\n                    searchTime: Date.now() - searchStartTime\r\n                }\r\n            });\r\n\r\n            return enhancedResults;\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'search:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Search failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async updateDocument(document: IndexedDocument): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        const documentId = document.id;\r\n        if (!documentId || !this.documents.has(documentId)) {\r\n            throw new Error(`Document ${documentId} not found`);\r\n        }\r\n\r\n        try {\r\n            const updatedDoc = IndexedDocument.fromObject({\r\n                ...document,\r\n                metadata: {\r\n                    ...document.metadata,\r\n                    lastModified: Date.now()\r\n                },\r\n                toObject: function (): IndexedDocument {\r\n                    throw new Error(\"Function not implemented.\");\r\n                }\r\n            });\r\n\r\n            await this.removeDocument(documentId);\r\n            await this.addDocuments([updatedDoc]);\r\n\r\n            this.emitEvent({\r\n                type: 'update:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'update:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to update document: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async removeDocument(documentId: string): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        if (!this.documents.has(documentId)) {\r\n            throw new Error(`Document ${documentId} not found`);\r\n        }\r\n\r\n        try {\r\n            this.documents.delete(documentId);\r\n            this.trie.removeData(documentId);\r\n            await this.indexManager.removeDocument(documentId);\r\n            this.cache.clear();\r\n\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n            }\r\n\r\n            this.emitEvent({\r\n                type: 'remove:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'remove:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to remove document: ${error}`);\r\n        }\r\n    }\r\n\r\n    public addEventListener(listener: SearchEventListener): void {\r\n        this.eventListeners.add(listener);\r\n    }\r\n\r\n    public removeEventListener(listener: SearchEventListener): void {\r\n        this.eventListeners.delete(listener);\r\n    }\r\n\r\n    private emitEvent(event: SearchEvent): void {\r\n        this.eventListeners.forEach(listener => {\r\n            try {\r\n                listener(event);\r\n            } catch (error) {\r\n                console.error('Error in event listener:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n  \r\n    private async loadIndexes(): Promise<void> {\r\n        try {\r\n            const storedIndex = await this.storage.getIndex(this.config.name);\r\n            if (storedIndex) {\r\n                this.indexManager.importIndex(storedIndex);\r\n                \r\n                // Reconstruct documents from stored index\r\n                const indexedDocs = this.indexManager.getAllDocuments();\r\n                for (const doc of indexedDocs) {\r\n                    this.documents.set(doc[1].id, IndexedDocument.fromObject(doc[1]));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.warn('Failed to load stored index, starting fresh:', error);\r\n        }\r\n    }\r\n\r\n    private generateCacheKey(query: string, options: SearchOptions): string {\r\n        return `${this.config.name}-${query}-${JSON.stringify(options)}`;\r\n    }\r\n\r\n    private generateDocumentId(): string {\r\n        return `${this.config.name}-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\r\n    }\r\n\r\n    public async clearIndex(): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        try {\r\n            await this.storage.clearIndices();\r\n            this.documents.clear();\r\n            this.trie = new TrieSearch();\r\n            this.indexManager.clear();\r\n            this.cache.clear();\r\n\r\n            this.emitEvent({\r\n                type: 'index:clear',\r\n                timestamp: Date.now()\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'index:clear:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to clear index: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        try {\r\n            await this.storage.close();\r\n            this.cache.clear();\r\n            this.documents.clear();\r\n            this.isInitialized = false;\r\n        } catch (error) {\r\n            console.warn('Error during close:', error);\r\n        }\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return this.isInitialized;\r\n    }\r\n\r\n    public getAllDocuments(): IndexedDocument[] {\r\n        return Array.from(this.documents.values());\r\n    }\r\n\r\n    public getDocumentById(id: string): IndexedDocument | undefined {\r\n        return this.documents.get(id);\r\n    }\r\n\r\n    public getIndexedDocumentCount(): number {\r\n        return this.documents.size;\r\n    }\r\n\r\n    public getTrieState(): unknown {\r\n        return this.trie.exportState();\r\n    }\r\n}","export class SearchError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'SearchError';\r\n  }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'IndexError';\r\n  }\r\n}\r\n\r\nexport class ValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n  }\r\n}\r\n\r\nexport class StorageError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'StorageError';\r\n  }\r\n}","import { SearchResult } from \"./search\";\r\n\r\nexport interface CacheOptions {\r\n    maxSize: number;\r\n    ttlMinutes: number;\r\n}\r\nexport interface CacheEntry {\r\n    data: SearchResult<unknown>[];\r\n    timestamp: number;\r\n    lastAccessed: number;\r\n    accessCount: number;\r\n}\r\n\r\n\r\n\r\nexport interface CacheOptions {\r\n    strategy: CacheStrategy;\r\n    maxSize: number;\r\n    ttlMinutes: number;\r\n}\r\n\r\nexport enum CacheStrategyType {\r\n    LRU = 'LRU',\r\n    MRU = 'MRU'\r\n  }\r\n\r\n  export type CacheStrategy = keyof typeof CacheStrategyType;\r\n  \r\n  export interface CacheStats {\r\n    hits: number;\r\n    misses: number;\r\n    evictions: number;\r\n}","/// <reference types=\"node\"/>\r\nimport type {\r\n    IndexConfig,\r\n    IndexOptions,\r\n    SearchContext,\r\n    SearchOptions,\r\n    SearchResult,\r\n    SearchStats,\r\n    SearchEventType,\r\n    SearchEvent,\r\n    DocumentLink,\r\n    DocumentRank,\r\n} from './types/index';\r\n\r\nexport { DocumentLink,DocumentRank,SearchEvent, SearchEventType,SearchStats, SearchContext }\r\n// Core imports\r\nimport { SearchEngine } from '@core/SearchEngine';\r\nimport { IndexManager } from '@storage/IndexManager';\r\nimport { QueryProcessor } from '@core/QueryProcessor';\r\n\r\n// Algorithm imports\r\nimport { TrieNode } from '@algorithms/trie/TrieNode';\r\nimport { TrieSearch } from '@algorithms/trie/TrieSearch';\r\n\r\n// Mapper imports\r\nimport { DataMapper } from '@/mappers/DataMapper';\r\nimport { IndexMapper } from '@/mappers/IndexMapper';\r\n\r\n// Storage imports\r\nimport { CacheManager } from '@storage/CacheManager';\r\nimport { IndexedDB } from '@storage/IndexedDBService';\r\n\r\n// Utility imports\r\nimport {\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n} from '@utils/index';\r\n\r\n// Export all types\r\nexport * from './types/';\r\n\r\n// Constants\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10,\r\n    regex: '',\r\n    highlight: false,\r\n    includeMatches: false,\r\n    includeScore: false,\r\n    includeStats: false,\r\n};\r\n\r\n// Error classes\r\nexport class SearchError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SearchError';\r\n    }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'IndexError';\r\n    }\r\n}\r\n\r\n// Type guards\r\nexport function isSearchOptions(obj: unknown): obj is SearchOptions {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const options = obj as Partial<SearchOptions>;\r\n    \r\n    return (\r\n        (typeof options.fuzzy === 'undefined' || typeof options.fuzzy === 'boolean') &&\r\n        (typeof options.maxResults === 'undefined' || typeof options.maxResults === 'number')\r\n    );\r\n}\r\n\r\nexport function isIndexConfig(obj: unknown): obj is IndexConfig {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const config = obj as Partial<IndexConfig>;\r\n    \r\n    return Boolean(\r\n        typeof config.name === 'string' &&\r\n        typeof config.version === 'number' &&\r\n        Array.isArray(config.fields)\r\n    );\r\n}\r\n\r\nexport function isSearchResult<T>(obj: unknown): obj is SearchResult<T> {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const result = obj as Partial<SearchResult<T>>;\r\n    \r\n    return Boolean(\r\n        'item' in result &&\r\n        typeof result.score === 'number' &&\r\n        Array.isArray(result.matches)\r\n    );\r\n}\r\n\r\n// Global window type declaration\r\ndeclare global {\r\n    interface Window {\r\n        NexusSearch: typeof NexusSearchNamespace;\r\n    }\r\n}\r\n\r\n// Create namespace\r\nconst NexusSearchNamespace = {\r\n    DEFAULT_INDEX_OPTIONS,\r\n    DEFAULT_SEARCH_OPTIONS,\r\n    SearchError,\r\n    IndexError,\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    isSearchOptions,\r\n    isIndexConfig,\r\n    isSearchResult,\r\n} as const;\r\n\r\n// Export individual components\r\nexport {\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    DataMapper,\r\n    IndexMapper,\r\n    CacheManager,\r\n    IndexedDB,\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n};\r\n\r\n// Initialize global namespace if in browser environment\r\nif (typeof window !== 'undefined') {\r\n    window.NexusSearch = NexusSearchNamespace;\r\n}\r\n\r\n// Export namespace\r\nexport const NexusSearch = NexusSearchNamespace;\r\nexport default NexusSearch;","import { IndexOptions, SearchOptions, SearchDBSchema, IndexConfig, MetadataEntry } from \"@/types\";\r\nimport { IDBPDatabase, openDB } from \"idb\";\r\n\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10,\r\n    regex: 'false',\r\n    highlight: false,\r\n    includeMatches: false,\r\n    includeScore: false,\r\n    includeStats: false\r\n};\r\n\r\nexport class IndexedDB {\r\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n    private readonly DB_NAME = 'nexus_search_db';\r\n    private readonly DB_VERSION = 1;\r\n    private initPromise: Promise<void> | null = null;\r\n\r\n    constructor() {\r\n        this.initPromise = this.initialize();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        if (this.db) return;\r\n\r\n        try {\r\n            this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n                upgrade(db) {\r\n                    // Handle version upgrades\r\n                    if (!db.objectStoreNames.contains('searchIndices')) {\r\n                        const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n                        indexStore.createIndex('timestamp', 'timestamp');\r\n                    }\r\n\r\n                    if (!db.objectStoreNames.contains('metadata')) {\r\n                        const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n                        metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n                    }\r\n                },\r\n                blocked() {\r\n                    console.warn('Database upgrade was blocked');\r\n                },\r\n                blocking() {\r\n                    console.warn('Current database version is blocking a newer version');\r\n                },\r\n                terminated() {\r\n                    console.error('Database connection was terminated');\r\n                }\r\n            });\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Storage initialization failed: ${message}`);\r\n        }\r\n    }\r\n\r\n    private async ensureConnection(): Promise<void> {\r\n        if (this.initPromise) {\r\n            await this.initPromise;\r\n        }\r\n\r\n        if (!this.db) {\r\n            throw new Error('Database connection not available');\r\n        }\r\n    }\r\n\r\n    async storeIndex(key: string, data: unknown): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const entry = {\r\n                id: key,\r\n                data,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            await this.db!.put('searchIndices', entry);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to store index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async getIndex(key: string): Promise<unknown | null> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const entry = await this.db!.get('searchIndices', key);\r\n            return entry?.data ?? null;\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to retrieve index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async updateMetadata(config: IndexConfig): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const metadata: MetadataEntry = {\r\n                id: 'config',\r\n                config,\r\n                lastUpdated: Date.now()\r\n            };\r\n\r\n            await this.db!.put('metadata', metadata);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to update metadata: ${message}`);\r\n        }\r\n    }\r\n\r\n    async getMetadata(): Promise<MetadataEntry | null> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const result = await this.db!.get('metadata', 'config');\r\n            return result ?? null;\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to retrieve metadata: ${message}`);\r\n        }\r\n    }\r\n\r\n    async clearIndices(): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            await this.db!.clear('searchIndices');\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to clear indices: ${message}`);\r\n        }\r\n    }\r\n\r\n    async deleteIndex(key: string): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            await this.db!.delete('searchIndices', key);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to delete index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async close(): Promise<void> {\r\n        if (this.db) {\r\n            this.db.close();\r\n            this.db = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SearchStorage {\r\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n    private readonly DB_NAME = 'nexus_search_db';\r\n    private readonly DB_VERSION = 1;\r\n    private initPromise: Promise<void> | null = null;\r\n\r\n    constructor() {\r\n        this.initPromise = this.initialize();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        if (this.db) return;\r\n\r\n        try {\r\n            this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n                upgrade(db) {\r\n                    if (!db.objectStoreNames.contains('searchIndices')) {\r\n                        const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n                        indexStore.createIndex('timestamp', 'timestamp');\r\n                    }\r\n\r\n                    if (!db.objectStoreNames.contains('metadata')) {\r\n                        const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n                        metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n                    }\r\n                },\r\n                blocked() {\r\n                    console.warn('Database upgrade was blocked');\r\n                },\r\n                blocking() {\r\n                    console.warn('Current database version is blocking a newer version');\r\n                },\r\n                terminated() {\r\n                    console.error('Database connection was terminated');\r\n                }\r\n            });\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Storage initialization failed: ${message}`);\r\n        }\r\n    }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n    \r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n  \r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field directly\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n  \r\n      await this.db!.put('metadata', metadata); // Use metadata directly\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n  \r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n","import { MetricsResult, PerformanceMetric } from \"@/types\";\r\n\r\nexport class PerformanceMonitor {\r\n    private metrics: Map<string, number[]>;\r\n\r\n    constructor() {\r\n        this.metrics = new Map();\r\n    }\r\n\r\n    async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n        const start = performance.now();\r\n        try {\r\n            return await fn();\r\n        } finally {\r\n            const duration = performance.now() - start;\r\n            this.recordMetric(name, duration);\r\n        }\r\n    }\r\n\r\n    private recordMetric(name: string, duration: number): void {\r\n        if (!this.metrics.has(name)) {\r\n            this.metrics.set(name, []);\r\n        }\r\n        this.metrics.get(name)!.push(duration);\r\n    }\r\n\r\n    getMetrics(): MetricsResult {\r\n        const results: MetricsResult = {};\r\n\r\n        this.metrics.forEach((durations, name) => {\r\n            results[name] = {\r\n                avg: this.average(durations),\r\n                min: Math.min(...durations),\r\n                max: Math.max(...durations),\r\n                count: durations.length\r\n            } as PerformanceMetric;\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    private average(numbers: number[]): number {\r\n        return numbers.reduce((a, b) => a + b, 0) / numbers.length;\r\n    }\r\n\r\n    clear(): void {\r\n        this.metrics.clear();\r\n    }\r\n}"],"names":["CacheManager","constructor","maxSize","ttlMinutes","initialStrategy","this","cache","Map","ttl","strategy","accessOrder","stats","hits","misses","evictions","set","key","data","size","evict","entry","timestamp","Date","now","lastAccessed","accessCount","updateAccessOrder","get","isExpired","delete","removeFromAccessOrder","clear","getStats","hitRate","keyToEvict","findLRUKey","findMRUKey","length","push","unshift","index","indexOf","splice","setStrategy","newStrategy","entries","forEach","prune","prunedCount","analyze","totalAccesses","totalAccessCount","accessCounts","averageAccessCount","mostAccessedKeys","Array","from","sort","a","b","slice","map","count","SearchStorage","options","type","db","memoryStorage","storageType","determineStorageType","isIndexedDBAvailable","indexedDB","_a","initialize","openDB","upgrade","createObjectStore","keyPath","createIndex","error","console","warn","storeIndex","name","put","id","getIndex","clearIndices","close","IndexedDocument","fields","metadata","fromObject","obj","toObject","bind","DataMapper","dataMap","mapData","documentId","has","Set","add","getDocuments","getAllKeys","keys","removeDocument","value","removeKey","exportState","serializedMap","importState","state","Object","TrieNode","children","isEndOfWord","documentRefs","weight","TrieSearch","root","documents","documentLinks","insert","text","words","toLowerCase","split","filter","Boolean","word","current","char","search","query","maxResults","results","found","collectDocumentRefs","remove","node","removeHelper","child","linkDocument","links","getDocumentLinks","removeData","fuzzySearch","maxDistance","fuzzySearchHelper","docId","values","currentWord","calculateLevenshteinDistance","childNode","newDistance","s1","s2","dp","fill","i","j","Math","min","trie","serializeNode","deserializeNode","serialized","childData","getSize","IndexMapper","dataMapper","trieSearch","indexDocument","document","field","tokenizeText","fuzzy","searchTerms","documentScores","term","score","matches","calculateScore","item","Error","replace","addDocument","updateDocument","createSearchableFields","searchableFields","getNestedValue","content","undefined","normalizeFieldValue","trim","isArray","v","join","String","path","validateSearchOptions","threshold","IndexManager","getAllDocuments","config","indexMapper","addDocuments","doc","generateDocumentId","contentRecord","searchableDoc","_b","result","exportIndex","serializeDocument","indexState","importIndex","isValidIndexData","typedData","isValidIndexState","message","indexData","JSON","parse","stringify","QueryProcessor","STOP_WORDS","process","tokens","tokenize","processedTokens","processTokens","optimizeQuery","classifyToken","startsWith","includes","token","normalizeToken","endsWith","SearchEngine","isInitialized","indexManager","queryProcessor","storage","eventListeners","storageError","emitEvent","loadIndexes","documentCount","indexedDoc","indexed","lastModified","searchableContent","searchStartTime","cacheKey","generateCacheKey","cachedResults","processedQuery","enhancedResults","resultCount","searchTime","updatedDoc","addEventListener","listener","removeEventListener","event","storedIndex","indexedDocs","random","toString","substring","clearIndex","isReady","getDocumentById","getIndexedDocumentCount","getTrieState","ValidationError","super","StorageError","CacheStrategyType","DEFAULT_INDEX_OPTIONS","caseSensitive","stemming","stopWords","minWordLength","maxWordLength","fuzzyThreshold","DEFAULT_SEARCH_OPTIONS","sortBy","sortOrder","page","pageSize","regex","highlight","includeMatches","includeScore","includeStats","SearchError","IndexError","isSearchOptions","isIndexConfig","version","isSearchResult","NexusSearchNamespace","window","NexusSearch","DB_NAME","DB_VERSION","initPromise","objectStoreNames","contains","blocked","blocking","terminated","ensureConnection","updateMetadata","lastUpdated","getMetadata","deleteIndex","metrics","measure","fn","start","performance","duration","recordMetric","getMetrics","durations","avg","average","max","numbers","reduce","sorted","localeCompare","originalSize","optimizedSize","compressionRatio","every"],"mappings":"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"}