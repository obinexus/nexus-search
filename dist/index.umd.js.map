{"version":3,"file":"index.umd.js","sources":["../src/storage/CacheManager.ts","../src/storage/SearchStorage.ts","../src/utils/SearchUtils.ts","../src/utils/ValidationUtils.ts","../src/mappers/DataMapper.ts","../src/algorithms/trie/TrieNode.ts","../src/algorithms/trie/TrieSearch.ts","../src/mappers/IndexMapper.ts","../src/storage/IndexManager.ts","../src/core/QueryProcessor.ts","../src/core/SearchEngine.ts","../src/types/errors.ts","../src/types/cache.ts","../src/index.ts","../src/storage/IndexedDBService.ts","../src/utils/PerformanceUtils.ts"],"sourcesContent":["import { CacheEntry, CacheStrategy, SearchResult } from \"@/types\";\r\n\r\n\r\n\r\nexport class CacheManager {\r\n    private cache: Map<string, CacheEntry>;\r\n    private readonly maxSize: number;\r\n    private readonly ttl: number;\r\n    private strategy: CacheStrategy; // Changed from readonly to private\r\n    private accessOrder: string[];\r\n    private stats: {\r\n        hits: number;\r\n        misses: number;\r\n        evictions: number;\r\n    };\r\n\r\n    constructor(\r\n        maxSize: number = 1000, \r\n        ttlMinutes: number = 5, \r\n        initialStrategy: CacheStrategy = 'LRU'\r\n    ) {\r\n        this.cache = new Map();\r\n        this.maxSize = maxSize;\r\n        this.ttl = ttlMinutes * 60 * 1000;\r\n        this.strategy = initialStrategy;\r\n        this.accessOrder = [];\r\n        this.stats = {\r\n            hits: 0,\r\n            misses: 0,\r\n            evictions: 0\r\n        };\r\n    }\r\n\r\n    set(key: string, data: SearchResult<unknown>[]): void {\r\n        if (this.cache.size >= this.maxSize) {\r\n            this.evict();\r\n        }\r\n\r\n        const entry: CacheEntry = {\r\n            data,\r\n            timestamp: Date.now(),\r\n            lastAccessed: Date.now(),\r\n            accessCount: 1\r\n        };\r\n\r\n        this.cache.set(key, entry);\r\n        this.updateAccessOrder(key);\r\n    }\r\n\r\n    get(key: string): SearchResult<unknown>[] | null {\r\n        const entry = this.cache.get(key);\r\n\r\n        if (!entry) {\r\n            this.stats.misses++;\r\n            return null;\r\n        }\r\n\r\n        if (this.isExpired(entry.timestamp)) {\r\n            this.cache.delete(key);\r\n            this.removeFromAccessOrder(key);\r\n            this.stats.misses++;\r\n            return null;\r\n        }\r\n\r\n        entry.lastAccessed = Date.now();\r\n        entry.accessCount++;\r\n        this.updateAccessOrder(key);\r\n        this.stats.hits++;\r\n\r\n        return entry.data;\r\n    }\r\n\r\n    clear(): void {\r\n        this.cache.clear();\r\n        this.accessOrder = [];\r\n        this.stats = {\r\n            hits: 0,\r\n            misses: 0,\r\n            evictions: 0\r\n        };\r\n    }\r\n\r\n    getStats() {\r\n        return {\r\n            ...this.stats,\r\n            size: this.cache.size,\r\n            maxSize: this.maxSize,\r\n            hitRate: this.stats.hits / (this.stats.hits + this.stats.misses),\r\n            strategy: this.strategy\r\n        };\r\n    }\r\n\r\n    private isExpired(timestamp: number): boolean {\r\n        return Date.now() - timestamp > this.ttl;\r\n    }\r\n\r\n    private evict(): void {\r\n        const keyToEvict = this.strategy === 'LRU' \r\n            ? this.findLRUKey()\r\n            : this.findMRUKey();\r\n\r\n        if (keyToEvict) {\r\n            this.cache.delete(keyToEvict);\r\n            this.removeFromAccessOrder(keyToEvict);\r\n            this.stats.evictions++;\r\n        }\r\n    }\r\n\r\n    private findLRUKey(): string | null {\r\n        return this.accessOrder[0] || null;\r\n    }\r\n\r\n    private findMRUKey(): string | null {\r\n        return this.accessOrder[this.accessOrder.length - 1] || null;\r\n    }\r\n\r\n    private updateAccessOrder(key: string): void {\r\n        this.removeFromAccessOrder(key);\r\n\r\n        if (this.strategy === 'LRU') {\r\n            this.accessOrder.push(key); // Most recently used at end\r\n        } else {\r\n            this.accessOrder.unshift(key); // Most recently used at start\r\n        }\r\n    }\r\n\r\n    private removeFromAccessOrder(key: string): void {\r\n        const index = this.accessOrder.indexOf(key);\r\n        if (index !== -1) {\r\n            this.accessOrder.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    setStrategy(newStrategy: CacheStrategy): void {\r\n        if (newStrategy === this.strategy) return;\r\n        \r\n        this.strategy = newStrategy;\r\n        const entries = [...this.accessOrder];\r\n        this.accessOrder = [];\r\n        entries.forEach(key => this.updateAccessOrder(key));\r\n    }\r\n\r\n    prune(): number {\r\n        let prunedCount = 0;\r\n        for (const [key, entry] of this.cache.entries()) {\r\n            if (this.isExpired(entry.timestamp)) {\r\n                this.cache.delete(key);\r\n                this.removeFromAccessOrder(key);\r\n                prunedCount++;\r\n            }\r\n        }\r\n        return prunedCount;\r\n    }\r\n\r\n    analyze(): {\r\n        hitRate: number;\r\n        averageAccessCount: number;\r\n        mostAccessedKeys: Array<{ key: string; count: number }>;\r\n    } {\r\n        const totalAccesses = this.stats.hits + this.stats.misses;\r\n        const hitRate = totalAccesses > 0 ? this.stats.hits / totalAccesses : 0;\r\n\r\n        let totalAccessCount = 0;\r\n        const accessCounts = new Map<string, number>();\r\n\r\n        for (const [key, entry] of this.cache.entries()) {\r\n            totalAccessCount += entry.accessCount;\r\n            accessCounts.set(key, entry.accessCount);\r\n        }\r\n\r\n        const averageAccessCount = this.cache.size > 0 \r\n            ? totalAccessCount / this.cache.size \r\n            : 0;\r\n\r\n        const mostAccessedKeys = Array.from(accessCounts.entries())\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, 5)\r\n            .map(([key, count]) => ({ key, count }));\r\n\r\n        return {\r\n            hitRate,\r\n            averageAccessCount,\r\n            mostAccessedKeys\r\n        };\r\n    }\r\n}","import { openDB, IDBPDatabase } from 'idb';\nimport type { SearchDBSchema, StorageOptions } from '@/types';\n\nexport class SearchStorage {\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\n    private memoryStorage: Map<string, unknown> = new Map();\n    private storageType: 'indexeddb' | 'memory';\n    \n    constructor(options: StorageOptions = {\n        type: 'memory'\n    }) {\n        this.storageType = this.determineStorageType(options);\n    }\n\n    private determineStorageType(options: StorageOptions): 'indexeddb' | 'memory' {\n        // Use memory storage if explicitly specified or if in Node.js environment\n        if (options.type === 'memory' || !this.isIndexedDBAvailable()) {\n            return 'memory';\n        }\n        return 'indexeddb';\n    }\n\n    private isIndexedDBAvailable(): boolean {\n        try {\n            return typeof indexedDB !== 'undefined' && indexedDB !== null;\n        } catch {\n            return false;\n        }\n    }\n\n    async initialize(): Promise<void> {\n        if (this.storageType === 'memory') {\n            // No initialization needed for memory storage\n            return;\n        }\n\n        try {\n            this.db = await openDB<SearchDBSchema>('nexus-search-db', 1, {\n                upgrade(db) {\n                    const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\n                    indexStore.createIndex('timestamp', 'timestamp');\n\n                    const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\n                    metaStore.createIndex('lastUpdated', 'lastUpdated');\n                }\n            });\n        } catch (error) {\n            // Fallback to memory storage if IndexedDB fails\n            this.storageType = 'memory';\n            console.warn('Failed to initialize IndexedDB, falling back to memory storage:', error);\n        }\n    }\n\n    async storeIndex(name: string, data: unknown): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.set(name, data);\n            return;\n        }\n\n        try {\n            await this.db?.put('searchIndices', {\n                id: name,\n                data,\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.error('Storage error:', error);\n            // Fallback to memory storage\n            this.memoryStorage.set(name, data);\n        }\n    }\n\n    async getIndex(name: string): Promise<unknown> {\n        if (this.storageType === 'memory') {\n            return this.memoryStorage.get(name);\n        }\n\n        try {\n            const entry = await this.db?.get('searchIndices', name);\n            return entry?.data;\n        } catch (error) {\n            console.error('Retrieval error:', error);\n            // Fallback to memory storage\n            return this.memoryStorage.get(name);\n        }\n    }\n\n    async clearIndices(): Promise<void> {\n        if (this.storageType === 'memory') {\n            this.memoryStorage.clear();\n            return;\n        }\n\n        try {\n            await this.db?.clear('searchIndices');\n        } catch (error) {\n            console.error('Clear error:', error);\n            this.memoryStorage.clear();\n        }\n    }\n\n    async close(): Promise<void> {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n        this.memoryStorage.clear();\n    }\n}","import { DocumentValue, IndexableDocument, OptimizationResult } from \"@/types\";\r\n\r\ntype DocumentContent = {\r\n    [key: string]: DocumentValue | DocumentContent;\r\n};\r\n\r\nexport function createSearchableFields<T extends IndexableDocument>(\r\n    document: T,\r\n    fields: string[]\r\n): Record<string, string> {\r\n    const searchableFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        if (value !== undefined) {\r\n            searchableFields[field] = normalizeFieldValue(value);\r\n        }\r\n    });\r\n    return searchableFields;\r\n}\r\n\r\nexport function normalizeFieldValue(value: DocumentValue): string {\r\n    if (typeof value === 'string') {\r\n        return value.toLowerCase().trim();\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n        return Object.values(value).map(v => normalizeFieldValue(v)).join(' ');\r\n    }\r\n    return String(value);\r\n}\r\n\r\nexport function getNestedValue(obj: DocumentContent, path: string): DocumentValue | undefined {\r\n    const keys = path.split('.');\r\n    let current: DocumentValue | DocumentContent = obj;\r\n\r\n    for (const key of keys) {\r\n        if (current && typeof current === 'object' && !Array.isArray(current) && key in current) {\r\n            current = current[key];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    return current as DocumentValue;\r\n}\r\n\r\n/**\r\n * Optimizes an array of indexable documents by removing duplicates and sorting them.\r\n *\r\n * @template T - The type of the indexable document.\r\n * @param {T[]} data - The array of indexable documents to be optimized.\r\n * @returns {OptimizationResult<T>} An object containing the optimized data and statistics about the optimization process.\r\n *\r\n * @typedef {Object} OptimizationResult\r\n * @property {T[]} data - The optimized array of indexable documents.\r\n * @property {Object} stats - Statistics about the optimization process.\r\n * @property {number} stats.originalSize - The original size of the data array.\r\n * @property {number} stats.optimizedSize - The size of the optimized data array.\r\n * @property {number} stats.compressionRatio - The ratio of the optimized size to the original size.\r\n */\r\nexport function optimizeIndex<T extends IndexableDocument>(data: T[]): OptimizationResult<T> {\r\n    const uniqueData = Array.from(new Set(data.map(item =>\r\n        JSON.stringify(item)\r\n    ))).map(item => JSON.parse(item)) as T[];\r\n\r\n    const sorted = uniqueData.sort((a, b) =>\r\n        JSON.stringify(a).localeCompare(JSON.stringify(b))\r\n    );\r\n\r\n    return {\r\n        data: sorted,\r\n        stats: {\r\n            originalSize: data.length,\r\n            optimizedSize: sorted.length,\r\n            compressionRatio: sorted.length / data.length\r\n        }\r\n    };\r\n}","import { SearchOptions, IndexConfig, SearchableDocument } from \"@/types\";\r\nimport { getNestedValue } from \"./SearchUtils\";\r\n\r\nexport function validateSearchOptions(options: SearchOptions): void {\r\n    if (options.maxResults && options.maxResults < 1) {\r\n        throw new Error('maxResults must be greater than 0');\r\n    }\r\n    if (options.threshold && (options.threshold < 0 || options.threshold > 1)) {\r\n        throw new Error('threshold must be between 0 and 1');\r\n    }\r\n    if (options.fields && !Array.isArray(options.fields)) {\r\n        throw new Error('fields must be an array');\r\n    }\r\n}\r\n\r\nexport function validateIndexConfig(config: IndexConfig): void {\r\n    if (!config.name) {\r\n        throw new Error('Index name is required');\r\n    }\r\n    if (!config.version || typeof config.version !== 'number') {\r\n        throw new Error('Valid version number is required');\r\n    }\r\n    if (!Array.isArray(config.fields) || config.fields.length === 0) {\r\n        throw new Error('At least one field must be specified for indexing');\r\n    }\r\n}\r\n\r\nexport function validateDocument(document: SearchableDocument, fields: string[]): boolean {\r\n    return fields.every(field => {\r\n        const value = getNestedValue(document.content, field);\r\n        return value !== undefined;\r\n    });\r\n}","export class DataMapper {\r\n  private dataMap: Map<string, Set<string>>;\r\n\r\n  constructor() {\r\n    this.dataMap = new Map();\r\n  }\r\n\r\n  mapData(key: string, documentId: string): void {\r\n    if (!this.dataMap.has(key)) {\r\n      this.dataMap.set(key, new Set());\r\n    }\r\n    this.dataMap.get(key)!.add(documentId);\r\n  }\r\n\r\n  getDocuments(key: string): Set<string> {\r\n    return this.dataMap.get(key) || new Set();\r\n  }\r\n\r\n  getAllKeys(): string[] {\r\n    return Array.from(this.dataMap.keys());\r\n  }\r\n\r\n  removeDocument(documentId: string): void {\r\n    this.dataMap.forEach(value => {\r\n      value.delete(documentId);\r\n    });\r\n  }\r\n\r\n  removeKey(key: string): void {\r\n    this.dataMap.delete(key);\r\n  }\r\n  \r\n  exportState(): Record<string, string[]> {\r\n    const serializedMap: Record<string, string[]> = {};\r\n    \r\n    this.dataMap.forEach((value, key) => {\r\n      serializedMap[key] = Array.from(value);\r\n    });\r\n\r\n    return serializedMap;\r\n  }\r\n\r\n  importState(state: Record<string, string[]>): void {\r\n    this.dataMap.clear();\r\n    \r\n    Object.entries(state).forEach(([key, value]) => {\r\n      this.dataMap.set(key, new Set(value));\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.dataMap.clear();\r\n  }\r\n}","export class TrieNode {\r\n  children: Map<string, TrieNode>;\r\n  isEndOfWord: boolean;\r\n  documentRefs: Set<string>;\r\n  weight: number;\r\n\r\n  constructor() {\r\n      this.children = new Map();\r\n      this.isEndOfWord = false;\r\n      this.documentRefs = new Set();\r\n      this.weight = 0.0;\r\n  }\r\n}\r\n","import {  IndexableDocument, DocumentLink, SerializedState, SerializedTrieNode } from \"@/types\";\r\nimport { TrieNode } from \"./TrieNode\";\r\n\r\nexport class TrieSearch {\r\n    private root: TrieNode;\r\n    private documents: Map<string, IndexableDocument>;\r\n    private documentLinks: Map<string, DocumentLink[]>;\r\n\r\n    constructor() {\r\n        this.root = new TrieNode();\r\n        this.documents = new Map();\r\n        this.documentLinks = new Map();\r\n    }\r\n\r\n    public insert(text: string, documentId: string): void {\r\n        if (!text || !documentId) return;\r\n\r\n        const words = text.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            let current = this.root;\r\n\r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    current.children.set(char, new TrieNode());\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n\r\n            current.isEndOfWord = true;\r\n            current.documentRefs.add(documentId);\r\n            current.weight += 1.0;\r\n        }\r\n    }\r\n\r\n    public search(query: string, maxResults: number = 10): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            let current = this.root;\r\n            let found = true;\r\n\r\n            for (const char of word) {\r\n                if (!current.children.has(char)) {\r\n                    found = false;\r\n                    break;\r\n                }\r\n                current = current.children.get(char)!;\r\n            }\r\n\r\n            if (found && current.isEndOfWord) {\r\n                this.collectDocumentRefs(current, results, maxResults);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public remove(documentId: string): void {\r\n        for (const [, node] of this.root.children) {\r\n            this.removeHelper(documentId, node);\r\n        }\r\n\r\n        this.documents.delete(documentId);\r\n        this.documentLinks.delete(documentId);\r\n    }\r\n\r\n    private removeHelper(documentId: string, node: TrieNode): void {\r\n        if (node.documentRefs.has(documentId)) {\r\n            node.documentRefs.delete(documentId);\r\n            node.weight -= 1.0;\r\n        }\r\n\r\n        for (const [, child] of node.children) {\r\n            this.removeHelper(documentId, child);\r\n        }\r\n\r\n        if (node.children.size === 0 && node.documentRefs.size === 0 && node.weight === 0) {\r\n            node.children.clear();\r\n        }\r\n    }\r\n\r\n    public linkDocument(documentId: string, links: DocumentLink[]): void {\r\n        this.documentLinks.set(documentId, links);\r\n    }\r\n\r\n    public getDocumentLinks(documentId: string): DocumentLink[] {\r\n        return this.documentLinks.get(documentId) ?? [];\r\n    }   \r\n    public removeData(documentId: string): void {\r\n        this.remove(documentId);\r\n    }\r\n\r\n    public fuzzySearch(query: string, maxDistance: number = 2): Set<string> {\r\n        if (!query) return new Set();\r\n\r\n        const results = new Set<string>();\r\n        const words = query.toLowerCase().split(/\\s+/).filter(Boolean);\r\n\r\n        for (const word of words) {\r\n            this.fuzzySearchHelper(word, this.root, '', maxDistance, results);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private collectDocumentRefs(node: TrieNode, results: Set<string>, maxResults: number): void {\r\n        if (node.isEndOfWord) {\r\n            for (const docId of node.documentRefs) {\r\n                if (results.size >= maxResults) return;\r\n                results.add(docId);\r\n            }\r\n        }\r\n\r\n        for (const child of node.children.values()) {\r\n            if (results.size >= maxResults) return;\r\n            this.collectDocumentRefs(child, results, maxResults);\r\n        }\r\n    }\r\n\r\n    private fuzzySearchHelper(\r\n        word: string,\r\n        node: TrieNode,\r\n        currentWord: string,\r\n        maxDistance: number,\r\n        results: Set<string>\r\n    ): void {\r\n        if (maxDistance < 0) return;\r\n\r\n        if (node.isEndOfWord) {\r\n            const distance = this.calculateLevenshteinDistance(word, currentWord);\r\n            if (distance <= maxDistance) {\r\n                node.documentRefs.forEach(id => results.add(id));\r\n            }\r\n        }\r\n\r\n        for (const [char, childNode] of node.children) {\r\n            const newDistance = word[currentWord.length] !== char ? maxDistance - 1 : maxDistance;\r\n            this.fuzzySearchHelper(word, childNode, currentWord + char, newDistance, results);\r\n\r\n            if (maxDistance > 0) {\r\n                this.fuzzySearchHelper(word, childNode, currentWord, maxDistance - 1, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    private calculateLevenshteinDistance(s1: string, s2: string): number {\r\n        const dp: number[][] = Array(s1.length + 1).fill(0)\r\n            .map(() => Array(s2.length + 1).fill(0));\r\n\r\n        for (let i = 0; i <= s1.length; i++) dp[i][0] = i;\r\n        for (let j = 0; j <= s2.length; j++) dp[0][j] = j;\r\n\r\n        for (let i = 1; i <= s1.length; i++) {\r\n            for (let j = 1; j <= s2.length; j++) {\r\n                dp[i][j] = Math.min(\r\n                    dp[i - 1][j] + 1,\r\n                    dp[i][j - 1] + 1,\r\n                    dp[i - 1][j - 1] + (s1[i - 1] !== s2[j - 1] ? 1 : 0)\r\n                );\r\n            }\r\n        }\r\n\r\n        return dp[s1.length][s2.length];\r\n    }\r\n\r\n    public exportState(): SerializedState {\r\n        return {\r\n            trie: this.serializeNode(this.root),\r\n            documents: Array.from(this.documents.entries()),\r\n            documentLinks: Array.from(this.documentLinks.entries())\r\n        };\r\n    }\r\n\r\n    public importState(state: SerializedState): void {\r\n        this.root = this.deserializeNode(state.trie);\r\n        this.documents = new Map(state.documents);\r\n        this.documentLinks = new Map(state.documentLinks);\r\n    }\r\n\r\n    private serializeNode(node: TrieNode): SerializedTrieNode {\r\n        const children: { [key: string]: SerializedTrieNode } = {};\r\n\r\n        node.children.forEach((childNode, char) => {\r\n            children[char] = this.serializeNode(childNode);\r\n        });\r\n\r\n        return {\r\n            isEndOfWord: node.isEndOfWord,\r\n            documentRefs: Array.from(node.documentRefs),\r\n            weight: node.weight,\r\n            children\r\n        };\r\n    }\r\n\r\n    private deserializeNode(serialized: SerializedTrieNode): TrieNode {\r\n        const node = new TrieNode();\r\n        node.isEndOfWord = serialized.isEndOfWord;\r\n        node.documentRefs = new Set(serialized.documentRefs);\r\n        node.weight = serialized.weight ?? 0;\r\n\r\n        Object.entries(serialized.children).forEach(([char, childData]) => {\r\n            node.children.set(char, this.deserializeNode(childData));\r\n        });\r\n\r\n        return node;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.root = new TrieNode();\r\n        this.documents.clear();\r\n        this.documentLinks.clear();\r\n    }\r\n\r\n    public getSize(): number {\r\n        return this.documents.size;\r\n    }\r\n}","import { TrieSearch } from \"@/algorithms/trie\";\r\nimport {  SearchableDocument, SearchResult, SerializedState } from \"@/types\";\r\nimport { DataMapper } from \"./DataMapper\";\r\n\r\n\r\n/**\r\n * IndexMapper class\r\n * @description IndexMapper class that indexes documents and performs search operations\r\n * @class IndexMapper\r\n * @implements {IndexMapper}\r\n * @method indexDocument\r\n * @method search\r\n * \r\n */\r\nexport class IndexMapper {\r\n  private dataMapper: DataMapper;\r\n  private trieSearch: TrieSearch;\r\n\r\n  constructor() {\r\n    this.dataMapper = new DataMapper();\r\n    this.trieSearch = new TrieSearch();\r\n  }\r\n\r\n  indexDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    fields.forEach(field => {\r\n        const value = document[field];\r\n        if (typeof value === 'string') {\r\n            const words = this.tokenizeText(value);\r\n            words.forEach(word => {\r\n                this.trieSearch.insert(word, id);\r\n                this.dataMapper.mapData(word.toLowerCase(), id);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n  search(query: string, options: { fuzzy?: boolean; maxResults?: number } = {}): SearchResult<string>[] {\r\n    const { fuzzy = false, maxResults = 10 } = options;\r\n    const searchTerms = this.tokenizeText(query);\r\n    \r\n    const documentScores = new Map<string, { score: number; matches: Set<string> }>();\r\n\r\n    searchTerms.forEach(term => {\r\n      const documentIds = fuzzy\r\n        ? this.trieSearch.fuzzySearch(term)\r\n        : this.trieSearch.search(term, maxResults);\r\n\r\n      documentIds.forEach(id => {\r\n        const current = documentScores.get(id) || { score: 0, matches: new Set<string>() };\r\n        current.score += this.calculateScore(id, term);\r\n        current.matches.add(term);\r\n        documentScores.set(id, current);\r\n      });\r\n    });\r\n\r\n    const results = Array.from(documentScores.entries())\r\n      .map(([id, { score, matches }]) => ({\r\n        item: id,\r\n        score: score / searchTerms.length,\r\n        matches: Array.from(matches)\r\n      }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    return results.slice(0, maxResults);\r\n  }\r\n\r\n  exportState(): unknown {\r\n    return {\r\n      trie: this.trieSearch.exportState(),\r\n      dataMap: this.dataMapper.exportState()\r\n    };\r\n  }\r\n\r\n  importState(state: { trie: SerializedState; dataMap: Record<string, string[]> }): void {\r\n    if (!state || !state.trie || !state.dataMap) {\r\n        throw new Error('Invalid index state');\r\n    }\r\n\r\n    this.trieSearch = new TrieSearch();\r\n    this.trieSearch.importState(state.trie );\r\n    this.dataMapper = new DataMapper();\r\n    this.dataMapper.importState(state.dataMap);\r\n}\r\n\r\n\r\n  private tokenizeText(text: string): string[] {\r\n    return text\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0);\r\n  }\r\n\r\n\r\n  private calculateScore(documentId: string, term: string): number {\r\n    const baseScore = this.dataMapper.getDocuments(term.toLowerCase()).has(documentId) ? 1.0 : 0.5;\r\n    return baseScore\r\n  \r\n  }\r\n  removeDocument(id: string): void {\r\n    this.trieSearch.remove(id);\r\n    this.dataMapper.removeDocument(id);\r\n  }\r\n\r\n\r\n  \r\n  addDocument(id: string, fields: string[], document: SearchableDocument): void {\r\n    this.indexDocument(document, id, fields);\r\n  }\r\n\r\n  updateDocument(document: SearchableDocument, id: string, fields: string[]): void {\r\n    this.removeDocument(id);\r\n    this.indexDocument(document, id, fields);\r\n  }\r\n\r\n  clear(): void {\r\n    this.trieSearch = new TrieSearch();\r\n    this.dataMapper = new DataMapper();\r\n  }\r\n}\r\n","import { IndexMapper } from \"@/mappers\";\r\nimport { \r\n    IndexConfig, \r\n    SearchOptions, \r\n    SearchResult, \r\n    IndexedDocument, \r\n    SearchableDocument, \r\n    SerializedState,\r\n    DocumentValue \r\n} from \"@/types\";\r\nimport { SerializedIndex } from \"@/types/core\";\r\nimport { createSearchableFields } from \"@/utils\";\r\n\r\nexport class IndexManager {\r\n    private indexMapper: IndexMapper;\r\n    private config: IndexConfig;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: IndexConfig) {\r\n        this.config = config;\r\n        this.indexMapper = new IndexMapper();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        for (const [index, doc] of documents.entries()) {\r\n            const id = this.generateDocumentId(index);\r\n\r\n            // Convert document fields to Record<string, DocumentValue>\r\n            const contentRecord: Record<string, DocumentValue> = {};\r\n            for (const field of this.config.fields) {\r\n                if (field in doc) {\r\n                    if (field in doc) {\r\n                        contentRecord[field] = (doc as any)[field] as DocumentValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Create searchable document with proper field extraction\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: contentRecord,\r\n                    id\r\n                }, this.config.fields),\r\n                metadata: doc.metadata\r\n            };\r\n\r\n            // Store original document with ID\r\n            this.documents.set(id, { ...doc, id });\r\n\r\n            // Index the document\r\n            try {\r\n                await this.indexMapper.indexDocument(searchableDoc, id, this.config.fields);\r\n            } catch (error) {\r\n                console.warn(`Failed to index document ${id}:`, error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async search<T extends IndexedDocument>(\r\n        query: string, \r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<T>[]> {\r\n        if (!query.trim()) return [];\r\n\r\n        try {\r\n            const searchResults = await this.indexMapper.search(query, {\r\n                fuzzy: options.fuzzy ?? false,\r\n                maxResults: options.maxResults ?? 10\r\n            });\r\n\r\n            return searchResults\r\n                .filter(result => this.documents.has(result.item))\r\n                .map(result => ({\r\n                    item: this.documents.get(result.item) as T,\r\n                    score: result.score,\r\n                    matches: result.matches\r\n                }))\r\n                .filter(result => result.score >= (options.threshold ?? 0.5));\r\n\r\n        } catch (error) {\r\n            console.error('Search error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    exportIndex(): SerializedIndex {\r\n        return {\r\n            documents: Array.from(this.documents.entries()).map(([key, value]) => ({\r\n                key,\r\n                value: this.serializeDocument(value)\r\n            })),\r\n            indexState: this.indexMapper.exportState(),\r\n            config: this.config\r\n        };\r\n    }\r\n\r\n    importIndex(data: unknown): void {\r\n        if (!this.isValidIndexData(data)) {\r\n            throw new Error('Invalid index data format');\r\n        }\r\n\r\n        try {\r\n            const typedData = data as SerializedIndex;\r\n            this.documents = new Map(\r\n                typedData.documents.map(item => [item.key, item.value])\r\n            );\r\n            this.config = typedData.config;\r\n            this.indexMapper = new IndexMapper();\r\n            \r\n            if (this.isValidIndexState(typedData.indexState)) {\r\n                this.indexMapper.importState({\r\n                    trie: typedData.indexState.trie,\r\n                    dataMap: typedData.indexState.dataMap\r\n                });\r\n            } else {\r\n                throw new Error('Invalid index state format');\r\n            }\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to import index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async removeDocument(documentId: string): Promise<void> {\r\n        if (this.documents.has(documentId)) {\r\n            this.documents.delete(documentId);\r\n            await this.indexMapper.removeDocument(documentId);\r\n        }\r\n    }\r\n\r\n    async updateDocument<T extends IndexedDocument>(document: T): Promise<void> {\r\n        const id = document.id;\r\n        if (this.documents.has(id)) {\r\n            this.documents.set(id, document);\r\n            const contentRecord: Record<string, DocumentValue> = {};\r\n            for (const field of this.config.fields) {\r\n                if (field in document) {\r\n                    if (field in document) {\r\n                        contentRecord[field] = (document as any)[field] as DocumentValue;\r\n                    }\r\n                }\r\n            }\r\n            const searchableDoc: SearchableDocument = {\r\n                id,\r\n                content: createSearchableFields({\r\n                    content: contentRecord,\r\n                    id\r\n                }, this.config.fields),\r\n                metadata: document.metadata\r\n            };\r\n            await this.indexMapper.updateDocument(searchableDoc, id, this.config.fields);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.documents.clear();\r\n        this.indexMapper = new IndexMapper();\r\n    }\r\n\r\n    private generateDocumentId(index: number): string {\r\n        return `${this.config.name}-${index}-${Date.now()}`;\r\n    }\r\n\r\n    private isValidIndexData(data: unknown): data is SerializedIndex {\r\n        if (!data || typeof data !== 'object') return false;\r\n        \r\n        const indexData = data as Partial<SerializedIndex>;\r\n        return Boolean(\r\n            indexData.documents &&\r\n            Array.isArray(indexData.documents) &&\r\n            indexData.indexState !== undefined &&\r\n            indexData.config &&\r\n            typeof indexData.config === 'object'\r\n        );\r\n    }\r\n\r\n    private isValidIndexState(state: unknown): state is { trie: SerializedState; dataMap: Record<string, string[]> } {\r\n        return (\r\n            state !== null &&\r\n            typeof state === 'object' &&\r\n            'trie' in state &&\r\n            'dataMap' in state\r\n        );\r\n    }\r\n\r\n    private serializeDocument(doc: IndexedDocument): IndexedDocument {\r\n        return JSON.parse(JSON.stringify(doc));\r\n    }\r\n}","import { QueryToken } from \"@/types\";\r\n\r\n\r\nexport class QueryProcessor {\r\n  private readonly STOP_WORDS = new Set([\r\n    'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for',\r\n    'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on',\r\n    'that', 'the', 'to', 'was', 'were', 'will', 'with'\r\n  ]);\r\n\r\n  process(query: string): string {\r\n    const tokens = this.tokenize(query);\r\n    const processedTokens = this.processTokens(tokens);\r\n    return this.optimizeQuery(processedTokens);\r\n  }\r\n\r\n  private tokenize(query: string): QueryToken[] {\r\n    return query\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(term => term.length > 0)\r\n      .map(term => this.classifyToken(term));\r\n  }\r\n\r\n  private classifyToken(term: string): QueryToken {\r\n    if (term.startsWith('+') || term.startsWith('-')) {\r\n      return { type: 'operator', value: term };\r\n    }\r\n    if (term.includes(':')) {\r\n      return { type: 'modifier', value: term };\r\n    }\r\n    return { type: 'term', value: term };\r\n  }\r\n\r\n  private processTokens(tokens: QueryToken[]): QueryToken[] {\r\n    return tokens\r\n      .filter(token => \r\n        token.type !== 'term' || !this.STOP_WORDS.has(token.value)\r\n      )\r\n      .map(token => this.normalizeToken(token));\r\n  }\r\n\r\n  private normalizeToken(token: QueryToken): QueryToken {\r\n    if (token.type === 'term') {\r\n      // Basic stemming (could be enhanced with proper stemming algorithm)\r\n      let value = token.value;\r\n      if (value.endsWith('ing')) value = value.slice(0, -3);\r\n      if (value.endsWith('s')) value = value.slice(0, -1);\r\n      return { ...token, value };\r\n    }\r\n    return token;\r\n  }\r\n\r\n  private optimizeQuery(tokens: QueryToken[]): string {\r\n    return tokens\r\n      .map(token => token.value)\r\n      .join(' ');\r\n  }\r\n}","/**\r\n * SearchEngine.ts - Reference Implementation\r\n * \r\n * This file contains the complete unoptimized version of the SearchEngine class\r\n * with all features intact. This version includes:\r\n * - Full event handling\r\n * - Debug methods\r\n * - Storage fallback\r\n * - Cache management\r\n * - Document indexing\r\n * - Search functionality\r\n */\r\n\r\n// Core imports\r\nimport { CacheManager, SearchStorage } from \"@/storage\";\r\nimport { \r\n    SearchOptions, \r\n    SearchResult, \r\n    IndexedDocument, \r\n    SearchEngineConfig,\r\n    SearchableDocument,\r\n    DocumentValue,\r\n    SearchEventListener,\r\n    SearchEvent\r\n} from \"@/types\";\r\nimport { validateSearchOptions, createSearchableFields } from \"@/utils\";\r\nimport { IndexManager } from \"../storage/IndexManager\";\r\nimport { QueryProcessor } from \"./QueryProcessor\";\r\nimport { TrieSearch } from \"@/algorithms/trie\";\r\n\r\n/**\r\n * SearchEngine class provides full-text search functionality with:\r\n * - Document indexing and storage\r\n * - Search with fuzzy matching\r\n * - Event handling\r\n * - Cache management\r\n * - Debug capabilities\r\n */\r\nexport class SearchEngine {\r\n    // Core components\r\n    private readonly indexManager: IndexManager;\r\n    private readonly queryProcessor: QueryProcessor;\r\n    private storage: SearchStorage; // Mutable for fallback\r\n    private readonly cache: CacheManager;\r\n    private readonly config: SearchEngineConfig;\r\n    private readonly eventListeners: Set<SearchEventListener>;\r\n    private trie: TrieSearch; // Mutable for reset\r\n    private isInitialized: boolean = false;\r\n    private documents: Map<string, IndexedDocument>;\r\n\r\n    constructor(config: SearchEngineConfig) {\r\n        this.config = config;\r\n        this.indexManager = new IndexManager(config);\r\n        this.queryProcessor = new QueryProcessor();\r\n        this.storage = new SearchStorage(config.storage);\r\n        this.cache = new CacheManager();\r\n        this.eventListeners = new Set();\r\n        this.trie = new TrieSearch();\r\n        this.documents = new Map();\r\n    }\r\n\r\n    /**\r\n     * Initializes the search engine and storage\r\n     */\r\n    public async initialize(): Promise<void> {\r\n        if (this.isInitialized) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            try {\r\n                await this.storage.initialize();\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n                \r\n                this.storage = new SearchStorage({ type: 'memory' });\r\n                await this.storage.initialize();\r\n            }\r\n\r\n            await this.loadIndexes();\r\n            this.isInitialized = true;\r\n\r\n            this.emitEvent({\r\n                type: 'search:start',\r\n                timestamp: Date.now()\r\n            });\r\n        } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : String(error);\r\n            throw new Error(`Failed to initialize search engine: ${errorMessage}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds documents to the search index\r\n     */\r\n    public async addDocuments<T extends IndexedDocument>(documents: T[]): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        try {\r\n            this.emitEvent({\r\n                type: 'index:start',\r\n                timestamp: Date.now(),\r\n                data: { documentCount: documents.length }\r\n            });\r\n\r\n            for (const doc of documents) {\r\n                const docId = doc.id || this.generateDocumentId();\r\n                this.documents.set(docId, doc);\r\n\r\n                const searchableDoc: SearchableDocument = {\r\n                    id: docId,\r\n                    content: createSearchableFields({\r\n                        content: doc.fields as Record<string, DocumentValue>,\r\n                        id: docId\r\n                    }, this.config.fields)\r\n                };\r\n\r\n                for (const field of this.config.fields) {\r\n                    if (searchableDoc.content[field]) {\r\n                        const content = String(searchableDoc.content[field]).toLowerCase();\r\n                        const words = content.split(/\\s+/).filter(Boolean);\r\n\r\n                        for (const word of words) {\r\n                            this.trie.insert(word, docId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            await this.indexManager.addDocuments(documents);\r\n\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n            }\r\n\r\n            this.cache.clear();\r\n\r\n            this.emitEvent({\r\n                type: 'index:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentCount: documents.length }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'index:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to add documents: ${error}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches the index for documents matching the query\r\n     */\r\n    async search<T extends IndexedDocument>(\r\n        query: string,\r\n        options: SearchOptions = {}\r\n    ): Promise<SearchResult<T>[]> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        validateSearchOptions(options);\r\n\r\n        const searchStartTime = Date.now();\r\n        this.emitEvent({\r\n            type: 'search:start',\r\n            timestamp: searchStartTime,\r\n            data: { query, options }\r\n        });\r\n\r\n        const cacheKey = this.generateCacheKey(query, options);\r\n        const cachedResults = this.cache.get(cacheKey);\r\n        if (cachedResults) {\r\n            return cachedResults as SearchResult<T>[];\r\n        }\r\n\r\n        try {\r\n            const processedQuery = this.queryProcessor.process(query);\r\n            const results = await this.indexManager.search<T>(processedQuery, options);\r\n\r\n            this.cache.set(cacheKey, results);\r\n\r\n            this.emitEvent({\r\n                type: 'search:complete',\r\n                timestamp: Date.now(),\r\n                data: {\r\n                    query,\r\n                    options,\r\n                    resultCount: results.length,\r\n                    searchTime: Date.now() - searchStartTime\r\n                }\r\n            });\r\n\r\n            return results;\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'search:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Search failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async removeDocument(documentId: string): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        if (!this.documents.has(documentId)) {\r\n            throw new Error(`Document ${documentId} not found`);\r\n        }\r\n\r\n        try {\r\n            this.emitEvent({\r\n                type: 'remove:start',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n\r\n            this.documents.delete(documentId);\r\n            await this.indexManager.removeDocument(documentId);\r\n\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n            }\r\n\r\n            this.cache.clear();\r\n\r\n            this.emitEvent({\r\n                type: 'remove:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'remove:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to remove document: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async updateDocument<T extends IndexedDocument>(document: T): Promise<void> {\r\n        if (!this.isInitialized) {\r\n            await this.initialize();\r\n        }\r\n\r\n        const documentId = document.id;\r\n        if (!documentId || !this.documents.has(documentId)) {\r\n            throw new Error(`Document ${documentId} not found`);\r\n        }\r\n\r\n        try {\r\n            this.emitEvent({\r\n                type: 'update:start',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n\r\n            this.documents.set(documentId, document);\r\n\r\n            const searchableDoc: SearchableDocument = {\r\n                id: documentId,\r\n                content: createSearchableFields({\r\n                    content: document.fields as Record<string, DocumentValue>,\r\n                    id: documentId\r\n                }, this.config.fields)\r\n            };\r\n\r\n            for (const field of this.config.fields) {\r\n                if (searchableDoc.content[field]) {\r\n                    const content = String(searchableDoc.content[field]).toLowerCase();\r\n                    const words = content.split(/\\s+/).filter(Boolean);\r\n\r\n                    for (const word of words) {\r\n                        this.trie.insert(word, documentId);\r\n                    }\r\n                }\r\n            }\r\n\r\n            await this.indexManager.updateDocument(document);\r\n\r\n            try {\r\n                await this.storage.storeIndex(this.config.name, this.indexManager.exportIndex());\r\n            } catch (storageError) {\r\n                this.emitEvent({\r\n                    type: 'storage:error',\r\n                    timestamp: Date.now(),\r\n                    error: storageError instanceof Error ? storageError : new Error(String(storageError))\r\n                });\r\n            }\r\n\r\n            this.cache.clear();\r\n\r\n            this.emitEvent({\r\n                type: 'update:complete',\r\n                timestamp: Date.now(),\r\n                data: { documentId }\r\n            });\r\n        } catch (error) {\r\n            this.emitEvent({\r\n                type: 'update:error',\r\n                timestamp: Date.now(),\r\n                error: error instanceof Error ? error : new Error(String(error))\r\n            });\r\n            throw new Error(`Failed to update document: ${error}`);\r\n        }\r\n    }\r\n\r\n\r\n    // Event handling methods\r\n    addEventListener(listener: SearchEventListener): void {\r\n        this.eventListeners.add(listener);\r\n    }\r\n\r\n    removeEventListener(listener: SearchEventListener): void {\r\n        this.eventListeners.delete(listener);\r\n    }\r\n\r\n    private emitEvent(event: SearchEvent): void {\r\n        this.eventListeners.forEach(listener => {\r\n            try {\r\n                listener(event);\r\n            } catch (error) {\r\n                console.error('Error in event listener:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Utility methods\r\n    private async loadIndexes(): Promise<void> {\r\n        try {\r\n            const storedIndex = await this.storage.getIndex(this.config.name);\r\n            if (storedIndex) {\r\n                this.indexManager.importIndex(storedIndex);\r\n            }\r\n        } catch (error) {\r\n            console.warn('Failed to load stored index, starting fresh:', error);\r\n        }\r\n    }\r\n\r\n    private generateCacheKey(query: string, options: SearchOptions): string {\r\n        return `${this.config.name}-${query}-${JSON.stringify(options)}`;\r\n    }\r\n\r\n    private generateDocumentId(): string {\r\n        return `${this.config.name}-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\r\n    }\r\n\r\n    // Reset methods\r\n    // private resetTrie(): void {\r\n    //     this.trie = new TrieSearch();\r\n    // }\r\n    \r\n    // private resetStorage(options: { type: 'memory' }): void {\r\n    //     this.storage = new SearchStorage(options);\r\n    // }\r\n\r\n    // Cleanup methods\r\n    async clearIndex(): Promise<void> {\r\n        try {\r\n            await this.storage.clearIndices();\r\n        } catch (error) {\r\n            console.warn('Failed to clear storage, continuing:', error);\r\n        }\r\n        this.documents.clear();\r\n        this.trie = new TrieSearch();\r\n        this.indexManager.clear();\r\n        this.cache.clear();\r\n    }\r\n\r\n    async close(): Promise<void> {\r\n        try {\r\n            await this.storage.close();\r\n            this.cache.clear();\r\n            this.documents.clear();\r\n            this.isInitialized = false;\r\n        } catch (error) {\r\n            console.warn('Error during close:', error);\r\n        }\r\n    }\r\n\r\n    get isReady(): boolean {\r\n        return this.isInitialized;\r\n    }\r\n\r\n    public getAllDocuments(): IndexedDocument[] {\r\n        return Array.from(this.documents.values());\r\n    }\r\n\r\n    // Debug methods\r\n    getIndexedDocumentCount(): number {\r\n        return this.documents.size;\r\n    }\r\n\r\n    getTrieState(): unknown {\r\n        return this.trie.exportState();\r\n    }\r\n}","export class SearchError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'SearchError';\r\n  }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'IndexError';\r\n  }\r\n}\r\n\r\nexport class ValidationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n  }\r\n}\r\n\r\nexport class StorageError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'StorageError';\r\n  }\r\n}","import { SearchResult } from \"./search\";\r\n\r\nexport interface CacheOptions {\r\n    maxSize: number;\r\n    ttlMinutes: number;\r\n}\r\nexport interface CacheEntry {\r\n    data: SearchResult<unknown>[];\r\n    timestamp: number;\r\n    lastAccessed: number;\r\n    accessCount: number;\r\n}\r\n\r\n\r\n\r\nexport interface CacheOptions {\r\n    strategy: CacheStrategy;\r\n    maxSize: number;\r\n    ttlMinutes: number;\r\n}\r\n\r\nexport enum CacheStrategyType {\r\n    LRU = 'LRU',\r\n    MRU = 'MRU'\r\n  }\r\n\r\n  export type CacheStrategy = keyof typeof CacheStrategyType;\r\n  \r\n  export interface CacheStats {\r\n    hits: number;\r\n    misses: number;\r\n    evictions: number;\r\n}","/// <reference types=\"node\"/>\r\nimport type {\r\n    IndexConfig,\r\n    IndexOptions,\r\n    SearchContext,\r\n    SearchOptions,\r\n    SearchResult,\r\n    SearchStats,\r\n    SearchEventType,\r\n    SearchEvent,\r\n    DocumentLink,\r\n    DocumentRank,\r\n} from './types/index';\r\n\r\nexport { DocumentLink,DocumentRank,SearchEvent, SearchEventType,SearchStats, SearchContext }\r\n// Core imports\r\nimport { SearchEngine } from '@core/SearchEngine';\r\nimport { IndexManager } from '@storage/IndexManager';\r\nimport { QueryProcessor } from '@core/QueryProcessor';\r\n\r\n// Algorithm imports\r\nimport { TrieNode } from '@algorithms/trie/TrieNode';\r\nimport { TrieSearch } from '@algorithms/trie/TrieSearch';\r\n\r\n// Mapper imports\r\nimport { DataMapper } from '@/mappers/DataMapper';\r\nimport { IndexMapper } from '@/mappers/IndexMapper';\r\n\r\n// Storage imports\r\nimport { CacheManager } from '@storage/CacheManager';\r\nimport { IndexedDB } from '@storage/IndexedDBService';\r\n\r\n// Utility imports\r\nimport {\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n} from '@utils/index';\r\n\r\n// Export all types\r\nexport * from './types/';\r\n\r\n// Constants\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10,\r\n    regex: '',\r\n    highlight: false,\r\n    includeMatches: false,\r\n    includeScore: false,\r\n    includeStats: false,\r\n};\r\n\r\n// Error classes\r\nexport class SearchError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SearchError';\r\n    }\r\n}\r\n\r\nexport class IndexError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'IndexError';\r\n    }\r\n}\r\n\r\n// Type guards\r\nexport function isSearchOptions(obj: unknown): obj is SearchOptions {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const options = obj as Partial<SearchOptions>;\r\n    \r\n    return (\r\n        (typeof options.fuzzy === 'undefined' || typeof options.fuzzy === 'boolean') &&\r\n        (typeof options.maxResults === 'undefined' || typeof options.maxResults === 'number')\r\n    );\r\n}\r\n\r\nexport function isIndexConfig(obj: unknown): obj is IndexConfig {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const config = obj as Partial<IndexConfig>;\r\n    \r\n    return Boolean(\r\n        typeof config.name === 'string' &&\r\n        typeof config.version === 'number' &&\r\n        Array.isArray(config.fields)\r\n    );\r\n}\r\n\r\nexport function isSearchResult<T>(obj: unknown): obj is SearchResult<T> {\r\n    if (!obj || typeof obj !== 'object') return false;\r\n    const result = obj as Partial<SearchResult<T>>;\r\n    \r\n    return Boolean(\r\n        'item' in result &&\r\n        typeof result.score === 'number' &&\r\n        Array.isArray(result.matches)\r\n    );\r\n}\r\n\r\n// Global window type declaration\r\ndeclare global {\r\n    interface Window {\r\n        NexusSearch: typeof NexusSearchNamespace;\r\n    }\r\n}\r\n\r\n// Create namespace\r\nconst NexusSearchNamespace = {\r\n    DEFAULT_INDEX_OPTIONS,\r\n    DEFAULT_SEARCH_OPTIONS,\r\n    SearchError,\r\n    IndexError,\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    isSearchOptions,\r\n    isIndexConfig,\r\n    isSearchResult,\r\n} as const;\r\n\r\n// Export individual components\r\nexport {\r\n    SearchEngine,\r\n    IndexManager,\r\n    QueryProcessor,\r\n    TrieNode,\r\n    TrieSearch,\r\n    DataMapper,\r\n    IndexMapper,\r\n    CacheManager,\r\n    IndexedDB,\r\n    PerformanceMonitor,\r\n    createSearchableFields,\r\n    optimizeIndex,\r\n    getNestedValue,\r\n    normalizeFieldValue,\r\n    validateSearchOptions,\r\n    validateIndexConfig,\r\n    validateDocument\r\n};\r\n\r\n// Initialize global namespace if in browser environment\r\nif (typeof window !== 'undefined') {\r\n    window.NexusSearch = NexusSearchNamespace;\r\n}\r\n\r\n// Export namespace\r\nexport const NexusSearch = NexusSearchNamespace;\r\nexport default NexusSearch;","import { IndexOptions, SearchOptions, SearchDBSchema, IndexConfig, MetadataEntry } from \"@/types\";\r\nimport { IDBPDatabase, openDB } from \"idb\";\r\n\r\nexport const DEFAULT_INDEX_OPTIONS: Required<IndexOptions> = {\r\n    caseSensitive: false,\r\n    stemming: true,\r\n    stopWords: ['the', 'a', 'an', 'and', 'or', 'but'],\r\n    minWordLength: 2,\r\n    maxWordLength: 50,\r\n    fuzzyThreshold: 0.8\r\n};\r\n\r\nexport const DEFAULT_SEARCH_OPTIONS: Required<SearchOptions> = {\r\n    fuzzy: false,\r\n    maxResults: 10,\r\n    threshold: 0.5,\r\n    fields: [],\r\n    sortBy: 'score',\r\n    sortOrder: 'desc',\r\n    page: 1,\r\n    pageSize: 10,\r\n    regex: 'false',\r\n    highlight: false,\r\n    includeMatches: false,\r\n    includeScore: false,\r\n    includeStats: false\r\n};\r\n\r\nexport class IndexedDB {\r\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n    private readonly DB_NAME = 'nexus_search_db';\r\n    private readonly DB_VERSION = 1;\r\n    private initPromise: Promise<void> | null = null;\r\n\r\n    constructor() {\r\n        this.initPromise = this.initialize();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        if (this.db) return;\r\n\r\n        try {\r\n            this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n                upgrade(db) {\r\n                    // Handle version upgrades\r\n                    if (!db.objectStoreNames.contains('searchIndices')) {\r\n                        const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n                        indexStore.createIndex('timestamp', 'timestamp');\r\n                    }\r\n\r\n                    if (!db.objectStoreNames.contains('metadata')) {\r\n                        const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n                        metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n                    }\r\n                },\r\n                blocked() {\r\n                    console.warn('Database upgrade was blocked');\r\n                },\r\n                blocking() {\r\n                    console.warn('Current database version is blocking a newer version');\r\n                },\r\n                terminated() {\r\n                    console.error('Database connection was terminated');\r\n                }\r\n            });\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Storage initialization failed: ${message}`);\r\n        }\r\n    }\r\n\r\n    private async ensureConnection(): Promise<void> {\r\n        if (this.initPromise) {\r\n            await this.initPromise;\r\n        }\r\n\r\n        if (!this.db) {\r\n            throw new Error('Database connection not available');\r\n        }\r\n    }\r\n\r\n    async storeIndex(key: string, data: unknown): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const entry = {\r\n                id: key,\r\n                data,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            await this.db!.put('searchIndices', entry);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to store index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async getIndex(key: string): Promise<unknown | null> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const entry = await this.db!.get('searchIndices', key);\r\n            return entry?.data ?? null;\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to retrieve index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async updateMetadata(config: IndexConfig): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const metadata: MetadataEntry = {\r\n                id: 'config',\r\n                config,\r\n                lastUpdated: Date.now()\r\n            };\r\n\r\n            await this.db!.put('metadata', metadata);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to update metadata: ${message}`);\r\n        }\r\n    }\r\n\r\n    async getMetadata(): Promise<MetadataEntry | null> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            const result = await this.db!.get('metadata', 'config');\r\n            return result ?? null;\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to retrieve metadata: ${message}`);\r\n        }\r\n    }\r\n\r\n    async clearIndices(): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            await this.db!.clear('searchIndices');\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to clear indices: ${message}`);\r\n        }\r\n    }\r\n\r\n    async deleteIndex(key: string): Promise<void> {\r\n        await this.ensureConnection();\r\n\r\n        try {\r\n            await this.db!.delete('searchIndices', key);\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Failed to delete index: ${message}`);\r\n        }\r\n    }\r\n\r\n    async close(): Promise<void> {\r\n        if (this.db) {\r\n            this.db.close();\r\n            this.db = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SearchStorage {\r\n    private db: IDBPDatabase<SearchDBSchema> | null = null;\r\n    private readonly DB_NAME = 'nexus_search_db';\r\n    private readonly DB_VERSION = 1;\r\n    private initPromise: Promise<void> | null = null;\r\n\r\n    constructor() {\r\n        this.initPromise = this.initialize();\r\n    }\r\n\r\n    async initialize(): Promise<void> {\r\n        if (this.db) return;\r\n\r\n        try {\r\n            this.db = await openDB<SearchDBSchema>(this.DB_NAME, this.DB_VERSION, {\r\n                upgrade(db) {\r\n                    if (!db.objectStoreNames.contains('searchIndices')) {\r\n                        const indexStore = db.createObjectStore('searchIndices', { keyPath: 'id' });\r\n                        indexStore.createIndex('timestamp', 'timestamp');\r\n                    }\r\n\r\n                    if (!db.objectStoreNames.contains('metadata')) {\r\n                        const metaStore = db.createObjectStore('metadata', { keyPath: 'id' });\r\n                        metaStore.createIndex('lastUpdated', 'lastUpdated');\r\n                    }\r\n                },\r\n                blocked() {\r\n                    console.warn('Database upgrade was blocked');\r\n                },\r\n                blocking() {\r\n                    console.warn('Current database version is blocking a newer version');\r\n                },\r\n                terminated() {\r\n                    console.error('Database connection was terminated');\r\n                }\r\n            });\r\n        } catch (error) {\r\n            const message = error instanceof Error ? error.message : 'Unknown error';\r\n            throw new Error(`Storage initialization failed: ${message}`);\r\n        }\r\n    }\r\n\r\n  private async ensureConnection(): Promise<void> {\r\n    if (this.initPromise) {\r\n      await this.initPromise;\r\n    }\r\n    \r\n    if (!this.db) {\r\n      throw new Error('Database connection not available');\r\n    }\r\n  }\r\n\r\n  async storeIndex(key: string, data: any): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = {\r\n        id: key,\r\n        data,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      await this.db!.put('searchIndices', entry);\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to store index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async getIndex(key: string): Promise<any | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const entry = await this.db!.get('searchIndices', key);\r\n      return entry?.data || null;\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve index: ${message}`);\r\n    }\r\n  }\r\n\r\n  async updateMetadata(config: IndexConfig): Promise<void> {\r\n    await this.ensureConnection();\r\n  \r\n    try {\r\n      const metadata: MetadataEntry = {\r\n        id: 'config', // Set id field directly\r\n        config,\r\n        lastUpdated: Date.now()\r\n      };\r\n  \r\n      await this.db!.put('metadata', metadata); // Use metadata directly\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to update metadata: ${message}`);\r\n    }\r\n  }\r\n  \r\n\r\n  async getMetadata(): Promise<MetadataEntry | null> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      const result = await this.db!.get('metadata', 'config');\r\n      return result || null; // Return `null` if `result` is `undefined`\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to retrieve metadata: ${message}`);\r\n    }\r\n  }\r\n\r\n  async clearIndices(): Promise<void> {\r\n    await this.ensureConnection();\r\n    \r\n    try {\r\n      await this.db!.clear('searchIndices');\r\n    } catch (error) {\r\n      const message = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error(`Failed to clear indices: ${message}`);\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    if (this.db) {\r\n      this.db.close();\r\n      this.db = null;\r\n    }\r\n  }\r\n}\r\n","import { MetricsResult, PerformanceMetric } from \"@/types\";\r\n\r\nexport class PerformanceMonitor {\r\n    private metrics: Map<string, number[]>;\r\n\r\n    constructor() {\r\n        this.metrics = new Map();\r\n    }\r\n\r\n    async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n        const start = performance.now();\r\n        try {\r\n            return await fn();\r\n        } finally {\r\n            const duration = performance.now() - start;\r\n            this.recordMetric(name, duration);\r\n        }\r\n    }\r\n\r\n    private recordMetric(name: string, duration: number): void {\r\n        if (!this.metrics.has(name)) {\r\n            this.metrics.set(name, []);\r\n        }\r\n        this.metrics.get(name)!.push(duration);\r\n    }\r\n\r\n    getMetrics(): MetricsResult {\r\n        const results: MetricsResult = {};\r\n\r\n        this.metrics.forEach((durations, name) => {\r\n            results[name] = {\r\n                avg: this.average(durations),\r\n                min: Math.min(...durations),\r\n                max: Math.max(...durations),\r\n                count: durations.length\r\n            } as PerformanceMetric;\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    private average(numbers: number[]): number {\r\n        return numbers.reduce((a, b) => a + b, 0) / numbers.length;\r\n    }\r\n\r\n    clear(): void {\r\n        this.metrics.clear();\r\n    }\r\n}"],"names":["CacheManager","constructor","maxSize","ttlMinutes","initialStrategy","this","cache","Map","ttl","strategy","accessOrder","stats","hits","misses","evictions","set","key","data","size","evict","entry","timestamp","Date","now","lastAccessed","accessCount","updateAccessOrder","get","isExpired","delete","removeFromAccessOrder","clear","getStats","hitRate","keyToEvict","findLRUKey","findMRUKey","length","push","unshift","index","indexOf","splice","setStrategy","newStrategy","entries","forEach","prune","prunedCount","analyze","totalAccesses","totalAccessCount","accessCounts","averageAccessCount","mostAccessedKeys","Array","from","sort","a","b","slice","map","count","SearchStorage","options","type","db","memoryStorage","storageType","determineStorageType","isIndexedDBAvailable","indexedDB","_a","initialize","openDB","upgrade","createObjectStore","keyPath","createIndex","error","console","warn","storeIndex","name","put","id","getIndex","clearIndices","close","createSearchableFields","document","fields","searchableFields","field","value","getNestedValue","content","undefined","normalizeFieldValue","toLowerCase","trim","isArray","v","join","Object","values","String","obj","path","keys","split","current","validateSearchOptions","maxResults","Error","threshold","DataMapper","dataMap","mapData","documentId","has","Set","add","getDocuments","getAllKeys","removeDocument","removeKey","exportState","serializedMap","importState","state","TrieNode","children","isEndOfWord","documentRefs","weight","TrieSearch","root","documents","documentLinks","insert","text","words","filter","Boolean","word","char","search","query","results","found","collectDocumentRefs","remove","node","removeHelper","child","linkDocument","links","getDocumentLinks","removeData","fuzzySearch","maxDistance","fuzzySearchHelper","docId","currentWord","calculateLevenshteinDistance","childNode","newDistance","s1","s2","dp","fill","i","j","Math","min","trie","serializeNode","deserializeNode","serialized","childData","getSize","IndexMapper","dataMapper","trieSearch","indexDocument","tokenizeText","fuzzy","searchTerms","documentScores","term","score","matches","calculateScore","item","replace","addDocument","updateDocument","IndexManager","config","indexMapper","addDocuments","doc","generateDocumentId","contentRecord","searchableDoc","metadata","_b","result","exportIndex","serializeDocument","indexState","importIndex","isValidIndexData","typedData","isValidIndexState","message","indexData","JSON","parse","stringify","QueryProcessor","STOP_WORDS","process","tokens","tokenize","processedTokens","processTokens","optimizeQuery","classifyToken","startsWith","includes","token","normalizeToken","endsWith","SearchEngine","isInitialized","indexManager","queryProcessor","storage","eventListeners","storageError","emitEvent","loadIndexes","errorMessage","documentCount","searchStartTime","cacheKey","generateCacheKey","cachedResults","processedQuery","resultCount","searchTime","addEventListener","listener","removeEventListener","event","storedIndex","random","toString","substring","clearIndex","isReady","getAllDocuments","getIndexedDocumentCount","getTrieState","ValidationError","super","StorageError","CacheStrategyType","DEFAULT_INDEX_OPTIONS","caseSensitive","stemming","stopWords","minWordLength","maxWordLength","fuzzyThreshold","DEFAULT_SEARCH_OPTIONS","sortBy","sortOrder","page","pageSize","regex","highlight","includeMatches","includeScore","includeStats","SearchError","IndexError","isSearchOptions","isIndexConfig","version","isSearchResult","NexusSearchNamespace","window","NexusSearch","DB_NAME","DB_VERSION","initPromise","objectStoreNames","contains","blocked","blocking","terminated","ensureConnection","updateMetadata","lastUpdated","getMetadata","deleteIndex","metrics","measure","fn","start","performance","duration","recordMetric","getMetrics","durations","avg","average","max","numbers","reduce","sorted","localeCompare","originalSize","optimizedSize","compressionRatio","every"],"mappings":"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"}